# Generated by Django 5.2.6 on 2025-10-12 12:15

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CircuitBreakerEventModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breaker_name', models.CharField(db_index=True, help_text='Name of the circuit breaker', max_length=255)),
                ('breaker_type', models.CharField(choices=[('DAILY_LOSS', 'DAILY_LOSS'), ('PORTFOLIO_LOSS', 'PORTFOLIO_LOSS'), ('CONSECUTIVE_LOSSES', 'CONSECUTIVE_LOSSES'), ('VOLATILITY_SPIKE', 'VOLATILITY_SPIKE'), ('TRANSACTION_FAILURE', 'TRANSACTION_FAILURE'), ('DEX_FAILURE', 'DEX_FAILURE'), ('GAS_PRICE_SPIKE', 'GAS_PRICE_SPIKE'), ('GAS_ESTIMATION_FAILURE', 'GAS_ESTIMATION_FAILURE'), ('MEMPOOL_CONGESTION', 'MEMPOOL_CONGESTION'), ('RPC_FAILURE', 'RPC_FAILURE'), ('RPC_LATENCY', 'RPC_LATENCY'), ('NETWORK_CONGESTION', 'NETWORK_CONGESTION'), ('CHAIN_REORG_DETECTED', 'CHAIN_REORG_DETECTED'), ('SLIPPAGE_EXCESSIVE', 'SLIPPAGE_EXCESSIVE'), ('LIQUIDITY_CRISIS', 'LIQUIDITY_CRISIS'), ('PRICE_IMPACT_EXCESSIVE', 'PRICE_IMPACT_EXCESSIVE'), ('ORACLE_PRICE_DEVIATION', 'ORACLE_PRICE_DEVIATION'), ('MEMORY_PRESSURE', 'MEMORY_PRESSURE'), ('CPU_OVERLOAD', 'CPU_OVERLOAD'), ('DATABASE_FAILURE', 'DATABASE_FAILURE'), ('REDIS_FAILURE', 'REDIS_FAILURE'), ('WEBSOCKET_FAILURE', 'WEBSOCKET_FAILURE'), ('RATE_LIMIT_EXCEEDED', 'RATE_LIMIT_EXCEEDED'), ('SUSPICIOUS_ACTIVITY', 'SUSPICIOUS_ACTIVITY'), ('AUTH_FAILURE_SPIKE', 'AUTH_FAILURE_SPIKE'), ('EXTERNAL_TRIGGER', 'EXTERNAL_TRIGGER'), ('MANUAL_EMERGENCY_STOP', 'MANUAL_EMERGENCY_STOP')], db_index=True, help_text='Type of circuit breaker', max_length=50)),
                ('event_type', models.CharField(db_index=True, help_text='Type of event (opened, closed, half_open, reset, etc.)', max_length=50)),
                ('priority', models.CharField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=2, help_text='Event priority level', max_length=20)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional event details')),
                ('error_message', models.TextField(blank=True, help_text='Error message if applicable', null=True)),
                ('failure_count', models.IntegerField(default=0, help_text='Failure count at time of event')),
                ('previous_state', models.CharField(blank=True, choices=[('CLOSED', 'CLOSED'), ('OPEN', 'OPEN'), ('HALF_OPEN', 'HALF_OPEN'), ('FORCED_OPEN', 'FORCED_OPEN'), ('DISABLED', 'DISABLED')], help_text='Previous state before event', max_length=20, null=True)),
                ('new_state', models.CharField(blank=True, choices=[('CLOSED', 'CLOSED'), ('OPEN', 'OPEN'), ('HALF_OPEN', 'HALF_OPEN'), ('FORCED_OPEN', 'FORCED_OPEN'), ('DISABLED', 'DISABLED')], help_text='New state after event', max_length=20, null=True)),
                ('user_id', models.IntegerField(blank=True, db_index=True, help_text='Associated user ID', null=True)),
                ('chain_id', models.IntegerField(blank=True, db_index=True, help_text='Associated chain ID', null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the event occurred')),
            ],
            options={
                'verbose_name': 'Circuit Breaker Event',
                'verbose_name_plural': 'Circuit Breaker Events',
                'db_table': 'circuit_breaker_events',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['breaker_name', '-timestamp'], name='circuit_bre_breaker_74044d_idx'), models.Index(fields=['event_type', '-timestamp'], name='circuit_bre_event_t_1677fb_idx'), models.Index(fields=['user_id', '-timestamp'], name='circuit_bre_user_id_bd9713_idx'), models.Index(fields=['-timestamp'], name='circuit_bre_timesta_6e4a69_idx')],
            },
        ),
        migrations.CreateModel(
            name='CircuitBreakerMetricsSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breaker_name', models.CharField(db_index=True, help_text='Name of the circuit breaker', max_length=255)),
                ('snapshot_time', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When this snapshot was taken')),
                ('period_start', models.DateTimeField(help_text='Start of the metrics period')),
                ('period_end', models.DateTimeField(help_text='End of the metrics period')),
                ('total_calls', models.IntegerField(default=0)),
                ('successful_calls', models.IntegerField(default=0)),
                ('failed_calls', models.IntegerField(default=0)),
                ('rejected_calls', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('error_rate', models.FloatField(default=0.0)),
                ('error_rate_1min', models.FloatField(default=0.0)),
                ('error_rate_5min', models.FloatField(default=0.0)),
                ('error_rate_15min', models.FloatField(default=0.0)),
                ('avg_latency_ms', models.FloatField(default=0.0)),
                ('p50_latency_ms', models.FloatField(default=0.0)),
                ('p95_latency_ms', models.FloatField(default=0.0)),
                ('p99_latency_ms', models.FloatField(default=0.0)),
                ('state_changes', models.IntegerField(default=0)),
                ('times_opened', models.IntegerField(default=0)),
                ('total_open_time_seconds', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Circuit Breaker Metrics Snapshot',
                'verbose_name_plural': 'Circuit Breaker Metrics Snapshots',
                'db_table': 'circuit_breaker_metrics',
                'ordering': ['-snapshot_time'],
                'indexes': [models.Index(fields=['breaker_name', '-snapshot_time'], name='circuit_bre_breaker_348755_idx'), models.Index(fields=['-snapshot_time'], name='circuit_bre_snapsho_b76df7_idx')],
            },
        ),
        migrations.CreateModel(
            name='CircuitBreakerStateModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Unique name of the circuit breaker', max_length=255, unique=True)),
                ('breaker_type', models.CharField(choices=[('DAILY_LOSS', 'DAILY_LOSS'), ('PORTFOLIO_LOSS', 'PORTFOLIO_LOSS'), ('CONSECUTIVE_LOSSES', 'CONSECUTIVE_LOSSES'), ('VOLATILITY_SPIKE', 'VOLATILITY_SPIKE'), ('TRANSACTION_FAILURE', 'TRANSACTION_FAILURE'), ('DEX_FAILURE', 'DEX_FAILURE'), ('GAS_PRICE_SPIKE', 'GAS_PRICE_SPIKE'), ('GAS_ESTIMATION_FAILURE', 'GAS_ESTIMATION_FAILURE'), ('MEMPOOL_CONGESTION', 'MEMPOOL_CONGESTION'), ('RPC_FAILURE', 'RPC_FAILURE'), ('RPC_LATENCY', 'RPC_LATENCY'), ('NETWORK_CONGESTION', 'NETWORK_CONGESTION'), ('CHAIN_REORG_DETECTED', 'CHAIN_REORG_DETECTED'), ('SLIPPAGE_EXCESSIVE', 'SLIPPAGE_EXCESSIVE'), ('LIQUIDITY_CRISIS', 'LIQUIDITY_CRISIS'), ('PRICE_IMPACT_EXCESSIVE', 'PRICE_IMPACT_EXCESSIVE'), ('ORACLE_PRICE_DEVIATION', 'ORACLE_PRICE_DEVIATION'), ('MEMORY_PRESSURE', 'MEMORY_PRESSURE'), ('CPU_OVERLOAD', 'CPU_OVERLOAD'), ('DATABASE_FAILURE', 'DATABASE_FAILURE'), ('REDIS_FAILURE', 'REDIS_FAILURE'), ('WEBSOCKET_FAILURE', 'WEBSOCKET_FAILURE'), ('RATE_LIMIT_EXCEEDED', 'RATE_LIMIT_EXCEEDED'), ('SUSPICIOUS_ACTIVITY', 'SUSPICIOUS_ACTIVITY'), ('AUTH_FAILURE_SPIKE', 'AUTH_FAILURE_SPIKE'), ('EXTERNAL_TRIGGER', 'EXTERNAL_TRIGGER'), ('MANUAL_EMERGENCY_STOP', 'MANUAL_EMERGENCY_STOP')], db_index=True, help_text='Type of circuit breaker', max_length=50)),
                ('state', models.CharField(choices=[('CLOSED', 'CLOSED'), ('OPEN', 'OPEN'), ('HALF_OPEN', 'HALF_OPEN'), ('FORCED_OPEN', 'FORCED_OPEN'), ('DISABLED', 'DISABLED')], default='CLOSED', help_text='Current state of the circuit breaker', max_length=20)),
                ('failure_count', models.IntegerField(default=0, help_text='Current failure count')),
                ('success_count', models.IntegerField(default=0, help_text='Current success count (for half-open state)')),
                ('last_failure_time', models.DateTimeField(blank=True, help_text='Time of last failure', null=True)),
                ('last_success_time', models.DateTimeField(blank=True, help_text='Time of last success', null=True)),
                ('last_state_change', models.DateTimeField(default=django.utils.timezone.now, help_text='Time of last state change')),
                ('metrics_data', models.JSONField(blank=True, default=dict, help_text='Serialized metrics data')),
                ('current_timeout_multiplier', models.FloatField(default=1.0, help_text='Current timeout escalation multiplier')),
                ('consecutive_timeouts', models.IntegerField(default=0, help_text='Number of consecutive timeout escalations')),
                ('user_id', models.IntegerField(blank=True, db_index=True, help_text='Associated user ID (for user-specific breakers)', null=True)),
                ('chain_id', models.IntegerField(blank=True, db_index=True, help_text='Associated chain ID (for chain-specific breakers)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this breaker is currently active')),
            ],
            options={
                'verbose_name': 'Circuit Breaker State',
                'verbose_name_plural': 'Circuit Breaker States',
                'db_table': 'circuit_breaker_states',
                'indexes': [models.Index(fields=['breaker_type', 'state'], name='circuit_bre_breaker_62ef5c_idx'), models.Index(fields=['user_id', 'is_active'], name='circuit_bre_user_id_761947_idx'), models.Index(fields=['chain_id', 'is_active'], name='circuit_bre_chain_i_46ed46_idx')],
            },
        ),
    ]
