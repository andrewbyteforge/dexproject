# Generated by Django 5.2.6 on 2025-09-25 12:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('paper_trading', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='papertradingaccount',
            name='current_balance_usd',
            field=models.DecimalField(decimal_places=2, default=Decimal('10000.00'), help_text='Current balance in USD', max_digits=20),
        ),
        migrations.AlterField(
            model_name='papertradingaccount',
            name='eth_balance',
            field=models.DecimalField(decimal_places=18, default=Decimal('1.0'), help_text='ETH balance for gas simulation', max_digits=36),
        ),
        migrations.AlterField(
            model_name='papertradingaccount',
            name='initial_balance_usd',
            field=models.DecimalField(decimal_places=2, default=Decimal('10000.00'), help_text='Starting balance in USD', max_digits=20),
        ),
        migrations.AlterField(
            model_name='papertradingaccount',
            name='name',
            field=models.CharField(help_text='Account name for identification', max_length=100),
        ),
        migrations.AlterField(
            model_name='papertradingaccount',
            name='total_fees_paid_usd',
            field=models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total gas fees paid', max_digits=20),
        ),
        migrations.AlterField(
            model_name='papertradingaccount',
            name='total_pnl_usd',
            field=models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total profit/loss in USD', max_digits=20),
        ),
        migrations.CreateModel(
            name='PaperStrategyConfiguration',
            fields=[
                ('config_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Configuration name', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('trading_mode', models.CharField(choices=[('CONSERVATIVE', 'Conservative'), ('MODERATE', 'Moderate'), ('AGGRESSIVE', 'Aggressive'), ('CUSTOM', 'Custom')], default='MODERATE', max_length=20)),
                ('use_fast_lane', models.BooleanField(default=True, help_text='Enable Fast Lane trading')),
                ('use_smart_lane', models.BooleanField(default=False, help_text='Enable Smart Lane trading')),
                ('fast_lane_threshold_usd', models.DecimalField(decimal_places=2, default=Decimal('100'), help_text='Max trade size for Fast Lane', max_digits=10)),
                ('max_position_size_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Max position size as % of portfolio', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('stop_loss_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Default stop loss percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('50'))])),
                ('take_profit_percent', models.DecimalField(decimal_places=2, default=Decimal('10.0'), help_text='Default take profit percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('1000'))])),
                ('max_daily_trades', models.IntegerField(default=20, help_text='Maximum trades per day', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('max_concurrent_positions', models.IntegerField(default=5, help_text='Maximum concurrent open positions', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('min_liquidity_usd', models.DecimalField(decimal_places=2, default=Decimal('10000'), help_text='Minimum liquidity required', max_digits=15)),
                ('max_slippage_percent', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text='Maximum allowed slippage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01')), django.core.validators.MaxValueValidator(Decimal('10'))])),
                ('confidence_threshold', models.DecimalField(decimal_places=2, default=Decimal('60'), help_text='Minimum confidence for trades', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('allowed_tokens', models.JSONField(blank=True, default=list, help_text='List of allowed token addresses')),
                ('blocked_tokens', models.JSONField(blank=True, default=list, help_text='List of blocked token addresses')),
                ('custom_parameters', models.JSONField(blank=True, default=dict, help_text='Custom strategy parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strategy_configs', to='paper_trading.papertradingaccount')),
            ],
            options={
                'db_table': 'paper_strategy_configs',
                'ordering': ['-updated_at'],
                'unique_together': {('account', 'name')},
            },
        ),
        migrations.CreateModel(
            name='PaperTradingSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, help_text='Session name/description', max_length=100)),
                ('status', models.CharField(choices=[('STARTING', 'Starting'), ('RUNNING', 'Running'), ('PAUSED', 'Paused'), ('STOPPING', 'Stopping'), ('STOPPED', 'Stopped'), ('ERROR', 'Error')], default='STARTING', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the session started')),
                ('ended_at', models.DateTimeField(blank=True, help_text='When the session ended', null=True)),
                ('last_heartbeat', models.DateTimeField(blank=True, help_text='Last activity timestamp', null=True)),
                ('total_trades_executed', models.IntegerField(default=0)),
                ('successful_trades', models.IntegerField(default=0)),
                ('failed_trades', models.IntegerField(default=0)),
                ('session_pnl_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total P&L for this session', max_digits=20)),
                ('starting_balance_usd', models.DecimalField(decimal_places=2, help_text='Balance at session start', max_digits=20)),
                ('ending_balance_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Balance at session end', max_digits=20, null=True)),
                ('error_count', models.IntegerField(default=0)),
                ('last_error_message', models.TextField(blank=True)),
                ('last_error_time', models.DateTimeField(blank=True, null=True)),
                ('config_snapshot', models.JSONField(default=dict, help_text='Strategy configuration at session start')),
                ('notes', models.TextField(blank=True, help_text='Session notes or observations')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trading_sessions', to='paper_trading.papertradingaccount')),
                ('strategy_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='paper_trading.paperstrategyconfiguration')),
            ],
            options={
                'db_table': 'paper_trading_sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='PaperPerformanceMetrics',
            fields=[
                ('metrics_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period_start', models.DateTimeField(help_text='Start of measurement period')),
                ('period_end', models.DateTimeField(help_text='End of measurement period')),
                ('total_trades', models.IntegerField(default=0)),
                ('winning_trades', models.IntegerField(default=0)),
                ('losing_trades', models.IntegerField(default=0)),
                ('win_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Win rate percentage', max_digits=5)),
                ('total_pnl_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total P&L in USD', max_digits=20)),
                ('total_pnl_percent', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total P&L as percentage', max_digits=10)),
                ('avg_win_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Average winning trade in USD', max_digits=15)),
                ('avg_loss_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Average losing trade in USD', max_digits=15)),
                ('largest_win_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('largest_loss_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15)),
                ('sharpe_ratio', models.DecimalField(blank=True, decimal_places=4, help_text='Sharpe ratio', max_digits=10, null=True)),
                ('max_drawdown_percent', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Maximum drawdown percentage', max_digits=5)),
                ('profit_factor', models.DecimalField(blank=True, decimal_places=2, help_text='Profit factor (gross profit / gross loss)', max_digits=10, null=True)),
                ('avg_execution_time_ms', models.IntegerField(default=0, help_text='Average trade execution time')),
                ('total_gas_fees_usd', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total gas fees paid', max_digits=15)),
                ('avg_slippage_percent', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Average slippage percentage', max_digits=5)),
                ('fast_lane_trades', models.IntegerField(default=0)),
                ('smart_lane_trades', models.IntegerField(default=0)),
                ('fast_lane_win_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5)),
                ('smart_lane_win_rate', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5)),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='paper_trading.papertradingsession')),
            ],
            options={
                'db_table': 'paper_performance_metrics',
                'ordering': ['-period_end'],
            },
        ),
        migrations.CreateModel(
            name='PaperAIThoughtLog',
            fields=[
                ('thought_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this thought log', primary_key=True, serialize=False)),
                ('decision_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('SKIP', 'Skip'), ('STOP_LOSS', 'Stop Loss'), ('TAKE_PROFIT', 'Take Profit')], help_text='Type of decision made', max_length=20)),
                ('token_address', models.CharField(help_text='Token being analyzed', max_length=42)),
                ('token_symbol', models.CharField(help_text='Token symbol', max_length=20)),
                ('confidence_level', models.CharField(choices=[('VERY_HIGH', 'Very High (90-100%)'), ('HIGH', 'High (70-90%)'), ('MEDIUM', 'Medium (50-70%)'), ('LOW', 'Low (30-50%)'), ('VERY_LOW', 'Very Low (<30%)')], help_text='Confidence level category', max_length=20)),
                ('confidence_percent', models.DecimalField(decimal_places=2, help_text='Exact confidence percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('risk_score', models.DecimalField(decimal_places=2, help_text='Risk assessment score (0-100, higher is riskier)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('opportunity_score', models.DecimalField(decimal_places=2, help_text='Opportunity assessment score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('primary_reasoning', models.TextField(help_text='Primary reasoning for the decision (1-3 sentences)')),
                ('key_factors', models.JSONField(default=list, help_text='Key factors that influenced the decision')),
                ('positive_signals', models.JSONField(default=list, help_text='Positive signals identified')),
                ('negative_signals', models.JSONField(default=list, help_text='Negative signals/risks identified')),
                ('market_data', models.JSONField(default=dict, help_text='Market data snapshot at decision time')),
                ('strategy_name', models.CharField(blank=True, help_text='Strategy that generated this decision', max_length=100)),
                ('lane_used', models.CharField(choices=[('FAST', 'Fast Lane'), ('SMART', 'Smart Lane')], default='FAST', help_text='Which lane was used for analysis', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the thought was generated')),
                ('analysis_time_ms', models.IntegerField(default=0, help_text='Time taken for analysis in milliseconds')),
                ('account', models.ForeignKey(help_text='Paper trading account', on_delete=django.db.models.deletion.CASCADE, related_name='thought_logs', to='paper_trading.papertradingaccount')),
                ('paper_trade', models.ForeignKey(blank=True, help_text='Associated paper trade (if executed)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='thought_logs', to='paper_trading.papertrade')),
            ],
            options={
                'db_table': 'paper_ai_thought_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['account', 'created_at'], name='paper_ai_th_account_6c5652_idx'), models.Index(fields=['decision_type'], name='paper_ai_th_decisio_eeb7fd_idx'), models.Index(fields=['confidence_level'], name='paper_ai_th_confide_c47c8d_idx'), models.Index(fields=['token_address'], name='paper_ai_th_token_a_7752b9_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='papertradingsession',
            index=models.Index(fields=['account', 'status'], name='paper_tradi_account_fa44dc_idx'),
        ),
        migrations.AddIndex(
            model_name='papertradingsession',
            index=models.Index(fields=['started_at'], name='paper_tradi_started_e880fd_idx'),
        ),
        migrations.AddIndex(
            model_name='papertradingsession',
            index=models.Index(fields=['status'], name='paper_tradi_status_3be48d_idx'),
        ),
        migrations.AddIndex(
            model_name='paperperformancemetrics',
            index=models.Index(fields=['session', 'period_end'], name='paper_perfo_session_816fb6_idx'),
        ),
        migrations.AddIndex(
            model_name='paperperformancemetrics',
            index=models.Index(fields=['win_rate'], name='paper_perfo_win_rat_3d493e_idx'),
        ),
        migrations.AddIndex(
            model_name='paperperformancemetrics',
            index=models.Index(fields=['total_pnl_percent'], name='paper_perfo_total_p_04bcc6_idx'),
        ),
    ]
