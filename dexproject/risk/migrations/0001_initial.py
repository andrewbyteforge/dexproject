# Generated by Django 5.2.6 on 2025-09-11 11:26

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('trading', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RiskCheckType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Risk check name (e.g., 'Honeypot Detection', 'LP Lock Check')", max_length=100, unique=True)),
                ('category', models.CharField(choices=[('HONEYPOT', 'Honeypot Detection'), ('LIQUIDITY', 'Liquidity Analysis'), ('OWNERSHIP', 'Ownership Check'), ('TAX_ANALYSIS', 'Tax Analysis'), ('CONTRACT_SECURITY', 'Contract Security'), ('HOLDER_ANALYSIS', 'Holder Analysis'), ('MARKET_STRUCTURE', 'Market Structure'), ('SOCIAL_SIGNALS', 'Social Signals')], help_text='Category of risk check', max_length=20)),
                ('description', models.TextField(help_text='Detailed description of what this check does')),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], default='MEDIUM', help_text='Default severity level for this check', max_length=10)),
                ('is_blocking', models.BooleanField(default=False, help_text='Whether a failure of this check blocks trading (hard block)')),
                ('timeout_seconds', models.PositiveIntegerField(default=10, help_text='Maximum time allowed for this check to complete')),
                ('retry_count', models.PositiveIntegerField(default=2, help_text='Number of retries on failure')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this check is currently enabled')),
                ('weight', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text='Weight for this check in overall risk scoring', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('config', models.JSONField(blank=True, default=dict, help_text='Check-specific configuration parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RiskProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Risk profile name (e.g., 'Conservative', 'Aggressive')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this risk profile')),
                ('max_risk_score', models.DecimalField(decimal_places=2, default=Decimal('70.0'), help_text='Maximum acceptable overall risk score', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('min_confidence_score', models.DecimalField(decimal_places=2, default=Decimal('70.0'), help_text='Minimum required confidence score', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('liquidity_threshold_usd', models.DecimalField(decimal_places=2, default=Decimal('50000.0'), help_text='Minimum liquidity threshold in USD', max_digits=15)),
                ('max_holder_concentration_percent', models.DecimalField(decimal_places=2, default=Decimal('20.0'), help_text='Maximum acceptable top holder concentration percentage', max_digits=5)),
                ('max_buy_tax_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Maximum acceptable buy tax percentage', max_digits=5)),
                ('max_sell_tax_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Maximum acceptable sell tax percentage', max_digits=5)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional risk profile configuration')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this risk profile is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_id', models.UUIDField(default=uuid.uuid4, help_text='Unique assessment identifier', unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('TIMEOUT', 'Timeout')], default='PENDING', max_length=15)),
                ('risk_level', models.CharField(blank=True, choices=[('VERY_LOW', 'Very Low'), ('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('VERY_HIGH', 'Very High'), ('CRITICAL', 'Critical')], max_length=12, null=True)),
                ('recommendation', models.CharField(blank=True, choices=[('STRONG_BUY', 'Strong Buy'), ('BUY', 'Buy'), ('HOLD', 'Hold'), ('AVOID', 'Avoid'), ('STRONG_AVOID', 'Strong Avoid'), ('BLOCKED', 'Blocked')], max_length=15, null=True)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall risk score (0-100, higher is riskier)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence in the assessment (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('has_blocking_issues', models.BooleanField(default=False, help_text='Whether any blocking risk checks failed')),
                ('blocking_reasons', models.JSONField(blank=True, default=list, help_text='List of reasons why trading is blocked')),
                ('summary', models.TextField(blank=True, help_text='Human-readable summary of the risk assessment')),
                ('key_risks', models.JSONField(blank=True, default=list, help_text='List of key risks identified')),
                ('mitigating_factors', models.JSONField(blank=True, default=list, help_text='List of factors that reduce risk')),
                ('context', models.JSONField(blank=True, default=dict, help_text='Additional context for the assessment')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the assessment was started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the assessment was completed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this assessment expires and should be refreshed', null=True)),
                ('pair', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='trading.tradingpair')),
                ('strategy', models.ForeignKey(blank=True, help_text='Strategy context for this assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='trading.strategy')),
                ('token', models.ForeignKey(help_text='Primary token being assessed', on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='trading.token')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskCheckResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_id', models.UUIDField(default=uuid.uuid4, help_text='Unique result identifier', unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('PASSED', 'Passed'), ('FAILED', 'Failed'), ('ERROR', 'Error'), ('TIMEOUT', 'Timeout'), ('SKIPPED', 'Skipped')], default='PENDING', max_length=10)),
                ('is_blocking', models.BooleanField(default=False, help_text='Whether this result blocks trading')),
                ('score', models.DecimalField(blank=True, decimal_places=2, help_text='Risk score for this check (0-100, higher is riskier)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('weight', models.DecimalField(decimal_places=2, default=Decimal('1.0'), help_text='Weight applied to this check', max_digits=5)),
                ('weighted_score', models.DecimalField(blank=True, decimal_places=4, help_text='Score multiplied by weight', max_digits=8, null=True)),
                ('findings', models.JSONField(blank=True, default=dict, help_text='Detailed findings from the check')),
                ('raw_data', models.JSONField(blank=True, default=dict, help_text='Raw data returned by the check')),
                ('error_message', models.TextField(blank=True, help_text='Error message if check failed')),
                ('execution_time_ms', models.PositiveIntegerField(blank=True, help_text='Execution time in milliseconds', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retries attempted')),
                ('provider_used', models.CharField(blank=True, help_text='Service/provider used for this check', max_length=100)),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the check was started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the check was completed', null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_results', to='risk.riskassessment')),
                ('check_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='risk.riskchecktype')),
            ],
            options={
                'ordering': ['assessment', 'check_type__category', 'check_type__name'],
            },
        ),
        migrations.CreateModel(
            name='RiskEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, help_text='Unique event identifier', unique=True)),
                ('event_type', models.CharField(choices=[('ASSESSMENT_BLOCKED', 'Assessment Blocked'), ('HIGH_RISK_DETECTED', 'High Risk Detected'), ('CHECK_FAILURE', 'Check Failure'), ('THRESHOLD_EXCEEDED', 'Threshold Exceeded'), ('HONEYPOT_DETECTED', 'Honeypot Detected'), ('LIQUIDITY_WARNING', 'Liquidity Warning'), ('UNUSUAL_ACTIVITY', 'Unusual Activity')], max_length=25)),
                ('severity', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('title', models.CharField(help_text='Event title/summary', max_length=200)),
                ('description', models.TextField(help_text='Detailed event description')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional event data')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether this event has been resolved')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When this event was resolved', null=True)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes on how this event was resolved')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='risk_events', to='risk.riskassessment')),
                ('check_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='risk_events', to='risk.riskcheckresult')),
                ('token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='risk_events', to='trading.token')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskProfileCheckConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this check is enabled for this profile')),
                ('is_blocking', models.BooleanField(blank=True, help_text='Override blocking behavior (null = use default)', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Override weight for this check (null = use default)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('10.0'))])),
                ('timeout_seconds', models.PositiveIntegerField(blank=True, help_text='Override timeout for this check (null = use default)', null=True)),
                ('custom_config', models.JSONField(blank=True, default=dict, help_text='Check-specific configuration overrides')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('check_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_configs', to='risk.riskchecktype')),
                ('risk_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_configs', to='risk.riskprofile')),
            ],
            options={
                'ordering': ['risk_profile', 'check_type__category', 'check_type__name'],
            },
        ),
        migrations.AddField(
            model_name='riskprofile',
            name='enabled_checks',
            field=models.ManyToManyField(help_text='Risk checks enabled for this profile', related_name='risk_profiles', through='risk.RiskProfileCheckConfig', to='risk.riskchecktype'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['assessment_id'], name='risk_riskas_assessm_c185f2_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['pair', 'started_at'], name='risk_riskas_pair_id_ed422d_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['token', 'started_at'], name='risk_riskas_token_i_248767_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['status'], name='risk_riskas_status_24b89b_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['risk_level'], name='risk_riskas_risk_le_d8da9f_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['recommendation'], name='risk_riskas_recomme_9ada97_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['has_blocking_issues'], name='risk_riskas_has_blo_0d9c05_idx'),
        ),
        migrations.AddIndex(
            model_name='riskassessment',
            index=models.Index(fields=['expires_at'], name='risk_riskas_expires_5088fb_idx'),
        ),
        migrations.AddIndex(
            model_name='riskcheckresult',
            index=models.Index(fields=['result_id'], name='risk_riskch_result__dd24c3_idx'),
        ),
        migrations.AddIndex(
            model_name='riskcheckresult',
            index=models.Index(fields=['assessment', 'status'], name='risk_riskch_assessm_28619b_idx'),
        ),
        migrations.AddIndex(
            model_name='riskcheckresult',
            index=models.Index(fields=['check_type', 'status'], name='risk_riskch_check_t_d186dc_idx'),
        ),
        migrations.AddIndex(
            model_name='riskcheckresult',
            index=models.Index(fields=['is_blocking'], name='risk_riskch_is_bloc_0d50e5_idx'),
        ),
        migrations.AddIndex(
            model_name='riskcheckresult',
            index=models.Index(fields=['started_at'], name='risk_riskch_started_edad77_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='riskcheckresult',
            unique_together={('assessment', 'check_type')},
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['event_id'], name='risk_riskev_event_i_ce8e41_idx'),
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['event_type', 'severity'], name='risk_riskev_event_t_52b156_idx'),
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['assessment'], name='risk_riskev_assessm_1e14bf_idx'),
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['token', 'created_at'], name='risk_riskev_token_i_4c14f6_idx'),
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['is_resolved'], name='risk_riskev_is_reso_0bdec0_idx'),
        ),
        migrations.AddIndex(
            model_name='riskevent',
            index=models.Index(fields=['created_at'], name='risk_riskev_created_256c90_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='riskprofilecheckconfig',
            unique_together={('risk_profile', 'check_type')},
        ),
    ]
