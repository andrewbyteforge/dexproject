# Generated by Django 5.2.6 on 2025-09-11 11:26

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('risk', '0001_initial'),
        ('trading', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DecisionContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_id', models.UUIDField(default=uuid.uuid4, help_text='Unique context identifier', unique=True)),
                ('decision_type', models.CharField(choices=[('BUY', 'Buy Decision'), ('SELL', 'Sell Decision'), ('HOLD', 'Hold Decision'), ('SKIP', 'Skip Decision'), ('EMERGENCY_EXIT', 'Emergency Exit')], max_length=15)),
                ('eth_price_usd', models.DecimalField(blank=True, decimal_places=8, help_text='ETH price in USD at decision time', max_digits=15, null=True)),
                ('gas_price_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Gas price in Gwei at decision time', max_digits=15, null=True)),
                ('token_price_usd', models.DecimalField(blank=True, decimal_places=12, help_text='Token price in USD at decision time', max_digits=20, null=True)),
                ('pair_liquidity_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Pair liquidity in USD at decision time', max_digits=20, null=True)),
                ('discovery_latency_ms', models.PositiveIntegerField(blank=True, help_text='Time from pair discovery to decision start (ms)', null=True)),
                ('analysis_duration_ms', models.PositiveIntegerField(blank=True, help_text='Time spent on analysis (ms)', null=True)),
                ('execution_latency_ms', models.PositiveIntegerField(blank=True, help_text='Time from decision to execution (ms)', null=True)),
                ('market_conditions', models.JSONField(blank=True, default=dict, help_text='Market conditions at decision time')),
                ('portfolio_state', models.JSONField(blank=True, default=dict, help_text='Portfolio state at decision time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pair', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decision_contexts', to='trading.tradingpair')),
                ('risk_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decision_contexts', to='risk.riskassessment')),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decision_contexts', to='trading.strategy')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decision_contexts', to='trading.token')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DecisionFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_id', models.UUIDField(default=uuid.uuid4, help_text='Unique feature identifier', unique=True)),
                ('name', models.CharField(help_text="Feature name (e.g., 'honeypot_score', 'liquidity_depth')", max_length=100)),
                ('category', models.CharField(choices=[('RISK_SIGNAL', 'Risk Signal'), ('MARKET_SIGNAL', 'Market Signal'), ('LIQUIDITY_SIGNAL', 'Liquidity Signal'), ('TECHNICAL_SIGNAL', 'Technical Signal'), ('SOCIAL_SIGNAL', 'Social Signal'), ('PORTFOLIO_SIGNAL', 'Portfolio Signal'), ('TIMING_SIGNAL', 'Timing Signal')], max_length=20)),
                ('data_type', models.CharField(choices=[('NUMERIC', 'Numeric'), ('BOOLEAN', 'Boolean'), ('CATEGORICAL', 'Categorical'), ('TEXT', 'Text')], max_length=15)),
                ('raw_value', models.JSONField(help_text='Raw feature value before processing')),
                ('processed_value', models.JSONField(blank=True, help_text='Processed/normalized feature value', null=True)),
                ('weight', models.DecimalField(decimal_places=4, default=Decimal('1.0'), help_text='Weight applied to this feature', max_digits=8)),
                ('contribution_score', models.DecimalField(blank=True, decimal_places=6, help_text="This feature's contribution to the final decision", max_digits=10, null=True)),
                ('confidence', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence in this feature value (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('source', models.CharField(blank=True, help_text='Data source for this feature', max_length=100)),
                ('processing_time_ms', models.PositiveIntegerField(blank=True, help_text='Time taken to compute this feature (ms)', null=True)),
                ('threshold_values', models.JSONField(blank=True, default=dict, help_text='Threshold values for this feature (e.g., min, max, optimal)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('context', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='analytics.decisioncontext')),
            ],
            options={
                'ordering': ['context', 'category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeatureImportance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importance_id', models.UUIDField(default=uuid.uuid4, help_text='Unique importance record identifier', unique=True)),
                ('feature_name', models.CharField(help_text='Name of the feature', max_length=100)),
                ('feature_category', models.CharField(choices=[('RISK_SIGNAL', 'Risk Signal'), ('MARKET_SIGNAL', 'Market Signal'), ('LIQUIDITY_SIGNAL', 'Liquidity Signal'), ('TECHNICAL_SIGNAL', 'Technical Signal'), ('SOCIAL_SIGNAL', 'Social Signal'), ('PORTFOLIO_SIGNAL', 'Portfolio Signal'), ('TIMING_SIGNAL', 'Timing Signal')], max_length=20)),
                ('analysis_start', models.DateTimeField(help_text='Start of analysis period')),
                ('analysis_end', models.DateTimeField(help_text='End of analysis period')),
                ('model_version', models.CharField(help_text='Model version for this analysis', max_length=50)),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Number of times this feature was used')),
                ('average_weight', models.DecimalField(decimal_places=4, default=Decimal('0'), help_text='Average weight applied to this feature', max_digits=8)),
                ('average_contribution', models.DecimalField(decimal_places=6, default=Decimal('0'), help_text='Average contribution to decisions', max_digits=10)),
                ('importance_score', models.DecimalField(decimal_places=4, default=Decimal('0'), help_text='Overall importance score', max_digits=8)),
                ('predictive_power', models.DecimalField(blank=True, decimal_places=2, help_text='Predictive power score (0-100)', max_digits=5, null=True)),
                ('stability_score', models.DecimalField(blank=True, decimal_places=2, help_text='Feature stability score (0-100)', max_digits=5, null=True)),
                ('correlation_with_outcome', models.DecimalField(blank=True, decimal_places=4, help_text='Correlation with successful outcomes (-1 to 1)', max_digits=6, null=True)),
                ('decisions_with_feature', models.PositiveIntegerField(default=0, help_text='Number of decisions that used this feature')),
                ('success_rate_with_feature', models.DecimalField(blank=True, decimal_places=2, help_text='Success rate when this feature was used', max_digits=5, null=True)),
                ('avg_pnl_with_feature', models.DecimalField(blank=True, decimal_places=8, help_text='Average PnL when this feature was used', max_digits=15, null=True)),
                ('trend_direction', models.CharField(blank=True, choices=[('INCREASING', 'Increasing'), ('DECREASING', 'Decreasing'), ('STABLE', 'Stable'), ('VOLATILE', 'Volatile')], help_text='Trend in feature importance', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-importance_score', 'feature_name'],
                'indexes': [models.Index(fields=['importance_id'], name='analytics_f_importa_7f1732_idx'), models.Index(fields=['feature_name', 'feature_category'], name='analytics_f_feature_939144_idx'), models.Index(fields=['model_version'], name='analytics_f_model_v_b6750f_idx'), models.Index(fields=['importance_score'], name='analytics_f_importa_6d4539_idx'), models.Index(fields=['analysis_start', 'analysis_end'], name='analytics_f_analysi_fb0d09_idx')],
                'unique_together': {('feature_name', 'model_version', 'analysis_start')},
            },
        ),
        migrations.CreateModel(
            name='ModelPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance_id', models.UUIDField(default=uuid.uuid4, help_text='Unique performance record identifier', unique=True)),
                ('model_version', models.CharField(help_text='Model version being tracked', max_length=50)),
                ('time_window', models.CharField(choices=[('HOURLY', 'Hourly'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly')], max_length=10)),
                ('period_start', models.DateTimeField(help_text='Start of the performance period')),
                ('period_end', models.DateTimeField(help_text='End of the performance period')),
                ('total_opportunities', models.PositiveIntegerField(default=0, help_text='Total opportunities evaluated')),
                ('decisions_made', models.PositiveIntegerField(default=0, help_text='Total decisions made')),
                ('trades_executed', models.PositiveIntegerField(default=0, help_text='Total trades executed')),
                ('average_confidence', models.DecimalField(blank=True, decimal_places=2, help_text='Average decision confidence', max_digits=5, null=True)),
                ('average_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Average decision quality score', max_digits=5, null=True)),
                ('risk_accuracy', models.DecimalField(blank=True, decimal_places=2, help_text='Risk assessment accuracy percentage', max_digits=5, null=True)),
                ('total_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Total PnL in USD', max_digits=20)),
                ('win_rate_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage of profitable trades', max_digits=5, null=True)),
                ('average_return_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Average return percentage per trade', max_digits=8, null=True)),
                ('sharpe_ratio', models.DecimalField(blank=True, decimal_places=4, help_text='Risk-adjusted return (Sharpe ratio)', max_digits=8, null=True)),
                ('max_drawdown_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Maximum drawdown percentage', max_digits=8, null=True)),
                ('average_decision_latency_ms', models.FloatField(blank=True, help_text='Average decision latency in milliseconds', null=True)),
                ('average_execution_latency_ms', models.FloatField(blank=True, help_text='Average execution latency in milliseconds', null=True)),
                ('vs_benchmark_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Performance vs benchmark percentage', max_digits=8, null=True)),
                ('custom_metrics', models.JSONField(blank=True, default=dict, help_text='Additional custom performance metrics')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-period_start'],
                'indexes': [models.Index(fields=['performance_id'], name='analytics_m_perform_9d9009_idx'), models.Index(fields=['model_version', 'time_window'], name='analytics_m_model_v_6facac_idx'), models.Index(fields=['period_start', 'period_end'], name='analytics_m_period__19a3af_idx'), models.Index(fields=['total_pnl_usd'], name='analytics_m_total_p_875e90_idx'), models.Index(fields=['win_rate_percent'], name='analytics_m_win_rat_42e8f5_idx')],
                'unique_together': {('model_version', 'time_window', 'period_start')},
            },
        ),
        migrations.CreateModel(
            name='ThoughtLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thought_id', models.UUIDField(default=uuid.uuid4, help_text='Unique thought log identifier', unique=True)),
                ('decision_outcome', models.CharField(choices=[('EXECUTE_BUY', 'Execute Buy'), ('EXECUTE_SELL', 'Execute Sell'), ('HOLD_POSITION', 'Hold Position'), ('SKIP_OPPORTUNITY', 'Skip Opportunity'), ('BLOCK_TRADE', 'Block Trade'), ('EMERGENCY_EXIT', 'Emergency Exit')], max_length=20)),
                ('confidence_percent', models.DecimalField(decimal_places=2, help_text="AI's confidence in this decision (0-100)", max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('overall_score', models.DecimalField(decimal_places=4, help_text='Overall decision score computed by the AI', max_digits=8)),
                ('primary_reasoning', models.TextField(help_text='Primary reasoning for the decision (1-3 sentences)')),
                ('detailed_analysis', models.TextField(blank=True, help_text='Detailed analysis and reasoning chain')),
                ('key_factors', models.JSONField(default=list, help_text='List of key factors that influenced the decision')),
                ('risk_factors', models.JSONField(default=list, help_text='Risk factors considered')),
                ('positive_signals', models.JSONField(default=list, help_text='Positive signals identified')),
                ('negative_signals', models.JSONField(default=list, help_text='Negative signals identified')),
                ('alternative_outcomes', models.JSONField(blank=True, default=list, help_text='Alternative decisions that were considered')),
                ('counterfactuals', models.JSONField(blank=True, default=list, help_text='What would change the decision (counterfactual reasoning)')),
                ('recommended_amount', models.DecimalField(blank=True, decimal_places=18, help_text='Recommended trade amount', max_digits=50, null=True)),
                ('max_slippage_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Recommended maximum slippage', max_digits=5, null=True)),
                ('max_gas_price_gwei', models.DecimalField(blank=True, decimal_places=2, help_text='Recommended maximum gas price', max_digits=10, null=True)),
                ('priority_level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', help_text='Execution priority level', max_length=20)),
                ('feedback_score', models.DecimalField(blank=True, decimal_places=2, help_text='Feedback score on decision quality (-100 to 100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('-100')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('outcome_evaluation', models.TextField(blank=True, help_text='Post-execution evaluation of the decision')),
                ('model_version', models.CharField(blank=True, help_text='Version of the decision model used', max_length=50)),
                ('feature_version', models.CharField(blank=True, help_text='Version of the feature engineering pipeline', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('context', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='thought_log', to='analytics.decisioncontext')),
                ('trade', models.ForeignKey(blank=True, help_text='Trade that resulted from this decision', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='thought_logs', to='trading.trade')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, help_text='Unique session identifier', unique=True)),
                ('name', models.CharField(help_text='Session name or description', max_length=200)),
                ('session_type', models.CharField(choices=[('LIVE_TRADING', 'Live Trading'), ('PAPER_TRADING', 'Paper Trading'), ('BACKTEST', 'Backtest'), ('MANUAL_REVIEW', 'Manual Review')], max_length=15)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('FAILED', 'Failed')], default='ACTIVE', max_length=10)),
                ('model_version', models.CharField(blank=True, help_text='Model version used in this session', max_length=50)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Session configuration parameters')),
                ('total_decisions', models.PositiveIntegerField(default=0, help_text='Total number of decisions in this session')),
                ('successful_decisions', models.PositiveIntegerField(default=0, help_text='Number of successful decisions')),
                ('average_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Average decision quality score', max_digits=5, null=True)),
                ('total_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Total PnL for this session (USD)', max_digits=20)),
                ('lessons_learned', models.JSONField(blank=True, default=list, help_text='Key lessons learned from this session')),
                ('model_updates', models.JSONField(blank=True, default=list, help_text='Model updates made based on this session')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, help_text='When the session ended', null=True)),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='learning_sessions', to='trading.strategy')),
                ('thought_logs', models.ManyToManyField(blank=True, help_text='Thought logs included in this session', related_name='learning_sessions', to='analytics.thoughtlog')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='DecisionMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metrics_id', models.UUIDField(default=uuid.uuid4, help_text='Unique metrics identifier', unique=True)),
                ('decision_latency_ms', models.PositiveIntegerField(blank=True, help_text='Time from opportunity to decision (ms)', null=True)),
                ('execution_latency_ms', models.PositiveIntegerField(blank=True, help_text='Time from decision to execution (ms)', null=True)),
                ('total_latency_ms', models.PositiveIntegerField(blank=True, help_text='Total time from opportunity to execution (ms)', null=True)),
                ('slippage_actual_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Actual slippage percentage', max_digits=8, null=True)),
                ('slippage_vs_expected_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Difference between actual and expected slippage', max_digits=8, null=True)),
                ('gas_efficiency_score', models.DecimalField(blank=True, decimal_places=2, help_text='Gas efficiency score (0-100)', max_digits=5, null=True)),
                ('execution_cost_usd', models.DecimalField(blank=True, decimal_places=8, help_text='Total execution cost in USD', max_digits=15, null=True)),
                ('opportunity_cost_usd', models.DecimalField(blank=True, decimal_places=8, help_text='Estimated opportunity cost of delays', max_digits=15, null=True)),
                ('pnl_5min_usd', models.DecimalField(blank=True, decimal_places=8, help_text='PnL after 5 minutes (USD)', max_digits=15, null=True)),
                ('pnl_30min_usd', models.DecimalField(blank=True, decimal_places=8, help_text='PnL after 30 minutes (USD)', max_digits=15, null=True)),
                ('pnl_24hr_usd', models.DecimalField(blank=True, decimal_places=8, help_text='PnL after 24 hours (USD)', max_digits=15, null=True)),
                ('risk_accuracy_score', models.DecimalField(blank=True, decimal_places=2, help_text='How accurate was the risk assessment (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('timing_score', models.DecimalField(blank=True, decimal_places=2, help_text='Quality of entry/exit timing (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('overall_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Overall decision quality score (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('vs_random_performance', models.DecimalField(blank=True, decimal_places=4, help_text='Performance vs random decision baseline', max_digits=8, null=True)),
                ('vs_market_performance', models.DecimalField(blank=True, decimal_places=4, help_text='Performance vs market/index baseline', max_digits=8, null=True)),
                ('custom_metrics', models.JSONField(blank=True, default=dict, help_text='Additional custom metrics')),
                ('last_evaluated_at', models.DateTimeField(blank=True, help_text='Last time metrics were updated', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('thought_log', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='analytics.thoughtlog')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['context_id'], name='analytics_d_context_9ff64c_idx'),
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['decision_type'], name='analytics_d_decisio_e956f9_idx'),
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['pair', 'created_at'], name='analytics_d_pair_id_f0cc66_idx'),
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['token', 'created_at'], name='analytics_d_token_i_ef0709_idx'),
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['strategy'], name='analytics_d_strateg_ae68c4_idx'),
        ),
        migrations.AddIndex(
            model_name='decisioncontext',
            index=models.Index(fields=['created_at'], name='analytics_d_created_f9cb45_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionfeature',
            index=models.Index(fields=['feature_id'], name='analytics_d_feature_309dac_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionfeature',
            index=models.Index(fields=['context', 'category'], name='analytics_d_context_197d1f_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionfeature',
            index=models.Index(fields=['name'], name='analytics_d_name_2d2f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionfeature',
            index=models.Index(fields=['category'], name='analytics_d_categor_d41548_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionfeature',
            index=models.Index(fields=['created_at'], name='analytics_d_created_69360d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='decisionfeature',
            unique_together={('context', 'name')},
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['thought_id'], name='analytics_t_thought_890a91_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['decision_outcome'], name='analytics_t_decisio_55be0c_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['context'], name='analytics_t_context_2bb15c_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['trade'], name='analytics_t_trade_i_c6b4c3_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['confidence_percent'], name='analytics_t_confide_43cc33_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['created_at'], name='analytics_t_created_ec2b9f_idx'),
        ),
        migrations.AddIndex(
            model_name='thoughtlog',
            index=models.Index(fields=['model_version'], name='analytics_t_model_v_f8c725_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['session_id'], name='analytics_l_session_1f8735_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['session_type', 'status'], name='analytics_l_session_079012_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['strategy'], name='analytics_l_strateg_f79dee_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['started_at'], name='analytics_l_started_7b39c6_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['average_quality_score'], name='analytics_l_average_5982e0_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionmetrics',
            index=models.Index(fields=['metrics_id'], name='analytics_d_metrics_162828_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionmetrics',
            index=models.Index(fields=['thought_log'], name='analytics_d_thought_a962a3_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionmetrics',
            index=models.Index(fields=['overall_quality_score'], name='analytics_d_overall_f4c65c_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionmetrics',
            index=models.Index(fields=['pnl_24hr_usd'], name='analytics_d_pnl_24h_6aa88f_idx'),
        ),
        migrations.AddIndex(
            model_name='decisionmetrics',
            index=models.Index(fields=['created_at'], name='analytics_d_created_a6c107_idx'),
        ),
    ]
