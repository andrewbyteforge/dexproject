# Generated by Django 5.2.6 on 2025-09-11 11:26

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Strategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Strategy name (e.g., 'Conservative Sniper', 'Aggressive Growth')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Strategy description and goals')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this strategy is available for use')),
                ('max_position_size_eth', models.DecimalField(decimal_places=6, default=Decimal('0.1'), help_text='Maximum position size in ETH', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('max_slippage_percent', models.DecimalField(decimal_places=2, default=Decimal('2.0'), help_text='Maximum allowed slippage percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.1')), django.core.validators.MaxValueValidator(Decimal('20.0'))])),
                ('max_gas_price_gwei', models.DecimalField(decimal_places=2, default=Decimal('50.0'), help_text='Maximum gas price willing to pay in Gwei', max_digits=10)),
                ('min_liquidity_usd', models.DecimalField(decimal_places=2, default=Decimal('50000.0'), help_text='Minimum liquidity required in USD', max_digits=15)),
                ('max_buy_tax_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Maximum acceptable buy tax percentage', max_digits=5)),
                ('max_sell_tax_percent', models.DecimalField(decimal_places=2, default=Decimal('5.0'), help_text='Maximum acceptable sell tax percentage', max_digits=5)),
                ('take_profit_percent', models.DecimalField(decimal_places=2, default=Decimal('50.0'), help_text='Take profit target percentage', max_digits=8)),
                ('stop_loss_percent', models.DecimalField(decimal_places=2, default=Decimal('20.0'), help_text='Stop loss percentage', max_digits=5)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional strategy configuration parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Strategies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Chain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Human-readable chain name (e.g., 'Ethereum', 'Base')", max_length=50, unique=True)),
                ('chain_id', models.PositiveIntegerField(help_text='Chain ID as defined by EIP-155 (e.g., 1 for Ethereum mainnet)', unique=True)),
                ('rpc_url', models.URLField(help_text='Primary RPC endpoint URL')),
                ('fallback_rpc_urls', models.JSONField(blank=True, default=list, help_text='List of fallback RPC URLs for redundancy')),
                ('block_time_seconds', models.PositiveIntegerField(default=12, help_text='Average block time in seconds')),
                ('gas_price_gwei', models.DecimalField(decimal_places=2, default=Decimal('20.0'), help_text='Default gas price in Gwei', max_digits=10)),
                ('max_gas_price_gwei', models.DecimalField(decimal_places=2, default=Decimal('50.0'), help_text='Maximum allowed gas price in Gwei', max_digits=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether trading is enabled on this chain')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['chain_id'],
                'indexes': [models.Index(fields=['chain_id'], name='trading_cha_chain_i_0c8da3_idx'), models.Index(fields=['is_active'], name='trading_cha_is_acti_1c3f22_idx')],
            },
        ),
        migrations.CreateModel(
            name='DEX',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="DEX name (e.g., 'Uniswap V2', 'Uniswap V3')", max_length=50)),
                ('router_address', models.CharField(help_text='Router contract address (0x...)', max_length=42)),
                ('factory_address', models.CharField(help_text='Factory contract address (0x...)', max_length=42)),
                ('fee_percentage', models.DecimalField(decimal_places=4, default=Decimal('0.3000'), help_text='Trading fee as percentage (e.g., 0.3000 for 0.3%)', max_digits=5)),
                ('is_active', models.BooleanField(default=True, help_text='Whether trading is enabled on this DEX')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dexes', to='trading.chain')),
            ],
            options={
                'ordering': ['chain', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='Token contract address (0x...)', max_length=42)),
                ('symbol', models.CharField(blank=True, help_text="Token symbol (e.g., 'USDC', 'WETH')", max_length=20)),
                ('name', models.CharField(blank=True, help_text='Full token name', max_length=100)),
                ('decimals', models.PositiveIntegerField(default=18, help_text='Number of decimal places', validators=[django.core.validators.MaxValueValidator(30)])),
                ('total_supply', models.DecimalField(blank=True, decimal_places=18, help_text='Total token supply', max_digits=50, null=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether the token contract is verified on blockchain explorers')),
                ('is_honeypot', models.BooleanField(default=False, help_text='Whether the token has been identified as a honeypot')),
                ('is_blacklisted', models.BooleanField(default=False, help_text='Whether the token is on our blacklist')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional token metadata (website, social links, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='trading.chain')),
            ],
            options={
                'ordering': ['chain', 'symbol'],
            },
        ),
        migrations.CreateModel(
            name='TradingPair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pair_address', models.CharField(help_text='Pair/pool contract address (0x...)', max_length=42)),
                ('reserve0', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Reserve amount for token0', max_digits=50)),
                ('reserve1', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Reserve amount for token1', max_digits=50)),
                ('liquidity_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Total liquidity in USD', max_digits=20, null=True)),
                ('volume_24h_usd', models.DecimalField(blank=True, decimal_places=2, help_text='24-hour trading volume in USD', max_digits=20, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pair is actively traded')),
                ('discovered_at', models.DateTimeField(auto_now_add=True, help_text='When this pair was first discovered')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time pair data was updated')),
                ('dex', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairs', to='trading.dex')),
                ('token0', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairs_as_token0', to='trading.token')),
                ('token1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pairs_as_token1', to='trading.token')),
            ],
            options={
                'ordering': ['-liquidity_usd', '-volume_24h_usd'],
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trade_id', models.UUIDField(default=uuid.uuid4, help_text='Unique trade identifier', unique=True)),
                ('trade_type', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell')], max_length=4)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=10)),
                ('amount_in', models.DecimalField(decimal_places=18, help_text='Input token amount', max_digits=50)),
                ('amount_out', models.DecimalField(blank=True, decimal_places=18, help_text='Output token amount (filled after execution)', max_digits=50, null=True)),
                ('price_usd', models.DecimalField(blank=True, decimal_places=8, help_text='Execution price in USD', max_digits=20, null=True)),
                ('transaction_hash', models.CharField(blank=True, help_text='Blockchain transaction hash', max_length=66)),
                ('block_number', models.PositiveIntegerField(blank=True, help_text='Block number where transaction was included', null=True)),
                ('gas_used', models.PositiveIntegerField(blank=True, help_text='Gas used for the transaction', null=True)),
                ('gas_price_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Gas price paid in Gwei', max_digits=15, null=True)),
                ('expected_amount_out', models.DecimalField(blank=True, decimal_places=18, help_text='Expected output amount before slippage', max_digits=50, null=True)),
                ('slippage_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Actual slippage percentage', max_digits=8, null=True)),
                ('fee_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Total fees paid in USD', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the trade was initiated')),
                ('executed_at', models.DateTimeField(blank=True, help_text='When the trade was executed on-chain', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When the trade was confirmed', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional trade metadata and context')),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trades', to='trading.strategy')),
                ('user', models.ForeignKey(blank=True, help_text='User who initiated this trade (null for bot trades)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trades', to=settings.AUTH_USER_MODEL)),
                ('pair', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='trading.tradingpair')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_id', models.UUIDField(default=uuid.uuid4, help_text='Unique position identifier', unique=True)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed'), ('PARTIALLY_CLOSED', 'Partially Closed')], default='OPEN', max_length=20)),
                ('total_amount_in', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Total amount invested', max_digits=50)),
                ('average_entry_price', models.DecimalField(blank=True, decimal_places=8, help_text='Average entry price in USD', max_digits=20, null=True)),
                ('current_amount', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Current token amount held', max_digits=50)),
                ('realized_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Realized PnL in USD', max_digits=20)),
                ('unrealized_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Unrealized PnL in USD', max_digits=20)),
                ('total_fees_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Total fees paid in USD', max_digits=15)),
                ('opened_at', models.DateTimeField(auto_now_add=True, help_text='When the position was opened')),
                ('closed_at', models.DateTimeField(blank=True, help_text='When the position was closed', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='positions', to=settings.AUTH_USER_MODEL)),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='positions', to='trading.strategy')),
                ('entry_trades', models.ManyToManyField(blank=True, help_text='Trades that opened this position', related_name='entry_positions', to='trading.trade')),
                ('exit_trades', models.ManyToManyField(blank=True, help_text='Trades that closed this position', related_name='exit_positions', to='trading.trade')),
                ('pair', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='trading.tradingpair')),
            ],
            options={
                'ordering': ['-opened_at'],
            },
        ),
        migrations.AddIndex(
            model_name='dex',
            index=models.Index(fields=['chain', 'is_active'], name='trading_dex_chain_i_cac228_idx'),
        ),
        migrations.AddIndex(
            model_name='dex',
            index=models.Index(fields=['router_address'], name='trading_dex_router__7de852_idx'),
        ),
        migrations.AddIndex(
            model_name='dex',
            index=models.Index(fields=['factory_address'], name='trading_dex_factory_993e67_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dex',
            unique_together={('name', 'chain')},
        ),
        migrations.AddIndex(
            model_name='token',
            index=models.Index(fields=['chain', 'address'], name='trading_tok_chain_i_961811_idx'),
        ),
        migrations.AddIndex(
            model_name='token',
            index=models.Index(fields=['symbol'], name='trading_tok_symbol_391e39_idx'),
        ),
        migrations.AddIndex(
            model_name='token',
            index=models.Index(fields=['is_verified'], name='trading_tok_is_veri_baec13_idx'),
        ),
        migrations.AddIndex(
            model_name='token',
            index=models.Index(fields=['is_honeypot'], name='trading_tok_is_hone_f292ef_idx'),
        ),
        migrations.AddIndex(
            model_name='token',
            index=models.Index(fields=['is_blacklisted'], name='trading_tok_is_blac_760953_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='token',
            unique_together={('address', 'chain')},
        ),
        migrations.AddIndex(
            model_name='tradingpair',
            index=models.Index(fields=['dex', 'is_active'], name='trading_tra_dex_id_9f4503_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingpair',
            index=models.Index(fields=['pair_address'], name='trading_tra_pair_ad_d8324a_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingpair',
            index=models.Index(fields=['liquidity_usd'], name='trading_tra_liquidi_ef115f_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingpair',
            index=models.Index(fields=['discovered_at'], name='trading_tra_discove_de4b27_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tradingpair',
            unique_together={('dex', 'token0', 'token1')},
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['trade_id'], name='trading_tra_trade_i_b44db8_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['user', 'created_at'], name='trading_tra_user_id_bcc05b_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['pair', 'created_at'], name='trading_tra_pair_id_02f335_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['status'], name='trading_tra_status_252e0c_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['trade_type'], name='trading_tra_trade_t_4eb7e8_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['transaction_hash'], name='trading_tra_transac_ce1f7b_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['executed_at'], name='trading_tra_execute_58d74e_idx'),
        ),
        migrations.AddIndex(
            model_name='position',
            index=models.Index(fields=['position_id'], name='trading_pos_positio_afd353_idx'),
        ),
        migrations.AddIndex(
            model_name='position',
            index=models.Index(fields=['user', 'status'], name='trading_pos_user_id_c3f000_idx'),
        ),
        migrations.AddIndex(
            model_name='position',
            index=models.Index(fields=['pair', 'status'], name='trading_pos_pair_id_b43d04_idx'),
        ),
        migrations.AddIndex(
            model_name='position',
            index=models.Index(fields=['opened_at'], name='trading_pos_opened__ef8f26_idx'),
        ),
        migrations.AddIndex(
            model_name='position',
            index=models.Index(fields=['closed_at'], name='trading_pos_closed__3d03b7_idx'),
        ),
    ]
