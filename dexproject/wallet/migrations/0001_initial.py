# Generated by Django 5.2.6 on 2025-09-11 11:26

import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('trading', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wallet_id', models.UUIDField(default=uuid.uuid4, help_text='Unique wallet identifier', unique=True)),
                ('name', models.CharField(help_text='Human-readable wallet name', max_length=100)),
                ('wallet_type', models.CharField(choices=[('HOT_WALLET', 'Hot Wallet'), ('CONNECTED_WALLET', 'Connected Wallet'), ('HARDWARE_WALLET', 'Hardware Wallet'), ('MULTISIG_WALLET', 'Multisig Wallet')], max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('LOCKED', 'Locked'), ('COMPROMISED', 'Compromised'), ('ARCHIVED', 'Archived')], default='ACTIVE', max_length=15)),
                ('address', models.CharField(help_text='Wallet address (0x...)', max_length=42, unique=True)),
                ('requires_confirmation', models.BooleanField(default=True, help_text='Whether transactions require manual confirmation')),
                ('daily_limit_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Daily spending limit in USD', max_digits=15, null=True)),
                ('per_transaction_limit_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Per-transaction limit in USD', max_digits=15, null=True)),
                ('is_trading_enabled', models.BooleanField(default=True, help_text='Whether this wallet can be used for trading')),
                ('derivation_path', models.CharField(blank=True, help_text='Derivation path for hardware wallets', max_length=100)),
                ('hardware_device_id', models.CharField(blank=True, help_text='Hardware device identifier', max_length=100)),
                ('required_signatures', models.PositiveIntegerField(blank=True, help_text='Required signatures for multisig wallets', null=True)),
                ('total_signers', models.PositiveIntegerField(blank=True, help_text='Total number of signers for multisig wallets', null=True)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional wallet configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Last time this wallet was used', null=True)),
                ('chain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to='trading.chain')),
                ('user', models.ForeignKey(blank=True, help_text='Wallet owner (null for system wallets)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_used_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, help_text='Unique transaction identifier', unique=True)),
                ('transaction_type', models.CharField(choices=[('TRADE_BUY', 'Trade Buy'), ('TRADE_SELL', 'Trade Sell'), ('TRANSFER_IN', 'Transfer In'), ('TRANSFER_OUT', 'Transfer Out'), ('APPROVAL', 'Token Approval'), ('WITHDRAW', 'Withdraw'), ('DEPOSIT', 'Deposit'), ('GAS_REFILL', 'Gas Refill'), ('EMERGENCY_EXIT', 'Emergency Exit')], max_length=15)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SUBMITTED', 'Submitted'), ('CONFIRMED', 'Confirmed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REPLACED', 'Replaced')], default='PENDING', max_length=10)),
                ('transaction_hash', models.CharField(blank=True, help_text='Blockchain transaction hash', max_length=66, null=True, unique=True)),
                ('block_number', models.PositiveIntegerField(blank=True, help_text='Block number where transaction was included', null=True)),
                ('block_hash', models.CharField(blank=True, help_text='Block hash where transaction was included', max_length=66)),
                ('transaction_index', models.PositiveIntegerField(blank=True, help_text='Transaction index within the block', null=True)),
                ('gas_limit', models.PositiveIntegerField(blank=True, help_text='Gas limit set for the transaction', null=True)),
                ('gas_used', models.PositiveIntegerField(blank=True, help_text='Actual gas used', null=True)),
                ('gas_price_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Gas price in Gwei', max_digits=15, null=True)),
                ('max_fee_per_gas_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Max fee per gas (EIP-1559)', max_digits=15, null=True)),
                ('max_priority_fee_per_gas_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Max priority fee per gas (EIP-1559)', max_digits=15, null=True)),
                ('to_address', models.CharField(help_text='Recipient address', max_length=42)),
                ('value_wei', models.DecimalField(decimal_places=0, default=Decimal('0'), help_text='ETH value in wei', max_digits=30)),
                ('input_data', models.TextField(blank=True, help_text='Transaction input data (hex encoded)')),
                ('nonce', models.PositiveIntegerField(blank=True, help_text='Transaction nonce', null=True)),
                ('token_amount', models.DecimalField(blank=True, decimal_places=18, help_text='Token amount being transferred', max_digits=50, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When transaction was submitted to the network', null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When transaction was confirmed', null=True)),
                ('failed_at', models.DateTimeField(blank=True, help_text='When transaction failed', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if transaction failed')),
                ('revert_reason', models.TextField(blank=True, help_text='Smart contract revert reason')),
                ('replacement_reason', models.CharField(blank=True, help_text='Reason for transaction replacement', max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional transaction metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('replaced_by', models.ForeignKey(blank=True, help_text='Transaction that replaced this one', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replaces', to='wallet.transaction')),
                ('token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='trading.token')),
                ('trade', models.ForeignKey(blank=True, help_text='Associated trade (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='trading.trade')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='wallet.wallet')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorization_id', models.UUIDField(default=uuid.uuid4, help_text='Unique authorization identifier', unique=True)),
                ('authorization_type', models.CharField(choices=[('TRADING', 'Trading Operations'), ('TRANSFERS', 'Token Transfers'), ('APPROVALS', 'Token Approvals'), ('EMERGENCY', 'Emergency Operations'), ('ADMIN', 'Administrative Operations')], max_length=15)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('REVOKED', 'Revoked'), ('EXPIRED', 'Expired')], default='PENDING', max_length=10)),
                ('permissions', models.JSONField(default=dict, help_text='Detailed permissions configuration')),
                ('spending_limit_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Spending limit for this authorization', max_digits=15, null=True)),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now, help_text='When this authorization becomes valid')),
                ('valid_until', models.DateTimeField(blank=True, help_text='When this authorization expires', null=True)),
                ('approval_notes', models.TextField(blank=True, help_text='Notes from the approval process')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('approved_at', models.DateTimeField(blank=True, help_text='When this authorization was approved', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Last time this authorization was used', null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_authorizations', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_authorizations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_authorizations', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizations', to='wallet.wallet')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_id', models.UUIDField(default=uuid.uuid4, help_text='Unique activity identifier', unique=True)),
                ('activity_type', models.CharField(choices=[('LOGIN', 'Login'), ('TRANSACTION', 'Transaction'), ('CONFIG_CHANGE', 'Configuration Change'), ('AUTHORIZATION', 'Authorization'), ('BALANCE_UPDATE', 'Balance Update'), ('SECURITY_EVENT', 'Security Event'), ('API_ACCESS', 'API Access')], max_length=15)),
                ('description', models.CharField(help_text='Brief description of the activity', max_length=500)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the activity source', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('session_id', models.CharField(blank=True, help_text='Session identifier', max_length=100)),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('was_successful', models.BooleanField(default=True, help_text='Whether the activity was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if activity failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='wallet.transaction')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wallet_activities', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='wallet.wallet')),
                ('authorization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='wallet.walletauthorization')),
            ],
            options={
                'verbose_name_plural': 'Wallet Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance_id', models.UUIDField(default=uuid.uuid4, help_text='Unique balance record identifier', unique=True)),
                ('balance', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Current token balance', max_digits=50)),
                ('balance_usd', models.DecimalField(blank=True, decimal_places=8, help_text='Balance value in USD', max_digits=20, null=True)),
                ('available_balance', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Available balance (excluding locked/pending amounts)', max_digits=50)),
                ('locked_balance', models.DecimalField(decimal_places=18, default=Decimal('0'), help_text='Locked balance (in pending orders)', max_digits=50)),
                ('last_price_usd', models.DecimalField(blank=True, decimal_places=12, help_text='Last known token price in USD', max_digits=20, null=True)),
                ('price_source', models.CharField(blank=True, help_text='Source of price information', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this balance is actively tracked')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last time balance was updated')),
                ('last_sync_block', models.PositiveIntegerField(blank=True, help_text='Last block number where balance was synced', null=True)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallet_balances', to='trading.token')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='wallet.wallet')),
            ],
            options={
                'ordering': ['-balance_usd', 'token__symbol'],
            },
        ),
        migrations.CreateModel(
            name='TransactionReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_id', models.UUIDField(default=uuid.uuid4, help_text='Unique receipt identifier', unique=True)),
                ('status', models.PositiveIntegerField(help_text='Transaction status (0 = failed, 1 = success)')),
                ('cumulative_gas_used', models.PositiveIntegerField(help_text='Cumulative gas used in the block up to this transaction')),
                ('effective_gas_price', models.DecimalField(blank=True, decimal_places=9, help_text='Effective gas price paid', max_digits=15, null=True)),
                ('logs', models.JSONField(blank=True, default=list, help_text='Transaction logs/events')),
                ('logs_bloom', models.TextField(blank=True, help_text='Bloom filter for logs')),
                ('contract_address', models.CharField(blank=True, help_text='Contract address if contract was created', max_length=42)),
                ('raw_receipt', models.JSONField(blank=True, default=dict, help_text='Complete raw receipt data from the blockchain')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='receipt', to='wallet.transaction')),
            ],
            options={
                'indexes': [models.Index(fields=['receipt_id'], name='wallet_tran_receipt_d83121_idx'), models.Index(fields=['transaction'], name='wallet_tran_transac_5e219b_idx'), models.Index(fields=['status'], name='wallet_tran_status_5d91b2_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['wallet_id'], name='wallet_wall_wallet__fcc2ac_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['user', 'status'], name='wallet_wall_user_id_c4ebd1_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['address'], name='wallet_wall_address_c7bf63_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['chain', 'status'], name='wallet_wall_chain_i_76f4c5_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['is_trading_enabled'], name='wallet_wall_is_trad_ba2d9b_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_id'], name='wallet_tran_transac_12527c_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['wallet', 'status'], name='wallet_tran_wallet__b1ebc7_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_hash'], name='wallet_tran_transac_798bd5_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['block_number'], name='wallet_tran_block_n_a9348f_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['transaction_type'], name='wallet_tran_transac_7debff_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['status'], name='wallet_tran_status_a49b73_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['submitted_at'], name='wallet_tran_submitt_5f6a83_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['confirmed_at'], name='wallet_tran_confirm_230b9e_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['trade'], name='wallet_tran_trade_i_664ef8_idx'),
        ),
        migrations.AddIndex(
            model_name='walletauthorization',
            index=models.Index(fields=['authorization_id'], name='wallet_wall_authori_708fb1_idx'),
        ),
        migrations.AddIndex(
            model_name='walletauthorization',
            index=models.Index(fields=['wallet', 'status'], name='wallet_wall_wallet__19d6ea_idx'),
        ),
        migrations.AddIndex(
            model_name='walletauthorization',
            index=models.Index(fields=['user', 'authorization_type'], name='wallet_wall_user_id_f98ac6_idx'),
        ),
        migrations.AddIndex(
            model_name='walletauthorization',
            index=models.Index(fields=['status'], name='wallet_wall_status_86ed55_idx'),
        ),
        migrations.AddIndex(
            model_name='walletauthorization',
            index=models.Index(fields=['valid_from', 'valid_until'], name='wallet_wall_valid_f_098a90_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['activity_id'], name='wallet_wall_activit_ea3c21_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['wallet', 'activity_type'], name='wallet_wall_wallet__502287_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['user', 'created_at'], name='wallet_wall_user_id_4f9ff0_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['activity_type'], name='wallet_wall_activit_b20478_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['was_successful'], name='wallet_wall_was_suc_3667e8_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['created_at'], name='wallet_wall_created_669505_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['balance_id'], name='wallet_wall_balance_cab006_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['wallet', 'is_active'], name='wallet_wall_wallet__fe4243_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['token'], name='wallet_wall_token_i_518cc1_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['balance_usd'], name='wallet_wall_balance_56fdb4_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['last_updated'], name='wallet_wall_last_up_5983e8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='walletbalance',
            unique_together={('wallet', 'token')},
        ),
    ]
