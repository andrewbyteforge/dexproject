# Generated by Django 5.2.6 on 2025-09-20 17:40

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SIWESession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_id', models.UUIDField(default=uuid.uuid4, help_text='Unique SIWE session identifier', unique=True)),
                ('wallet_address', models.CharField(help_text='Wallet address (0x...)', max_length=42)),
                ('domain', models.CharField(help_text='Domain that issued the SIWE message', max_length=255)),
                ('statement', models.TextField(blank=True, help_text='Human-readable ASCII assertion')),
                ('uri', models.URLField(help_text='URI referring to the resource of the request')),
                ('version', models.CharField(default='1', help_text='SIWE message version', max_length=10)),
                ('chain_id', models.PositiveIntegerField(help_text='Chain ID for the network')),
                ('nonce', models.CharField(help_text='Random nonce for session uniqueness', max_length=96)),
                ('issued_at', models.DateTimeField(help_text='When the message was issued')),
                ('expiration_time', models.DateTimeField(blank=True, help_text='When the session expires', null=True)),
                ('not_before', models.DateTimeField(blank=True, help_text='When the session becomes valid', null=True)),
                ('request_id', models.CharField(blank=True, help_text='Optional request identifier', max_length=255)),
                ('message', models.TextField(help_text='Complete SIWE message that was signed')),
                ('signature', models.CharField(help_text='Signature of the SIWE message (0x...)', max_length=132)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Verification'), ('VERIFIED', 'Verified and Active'), ('EXPIRED', 'Expired'), ('REVOKED', 'Revoked'), ('FAILED', 'Verification Failed')], default='PENDING', max_length=10)),
                ('django_session_key', models.CharField(blank=True, help_text='Associated Django session key', max_length=40)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the session', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('verified_at', models.DateTimeField(blank=True, help_text='When the signature was verified', null=True)),
                ('verification_error', models.TextField(blank=True, help_text='Error message if verification failed')),
                ('user', models.ForeignKey(blank=True, help_text='Associated Django user (auto-created on first login)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='siwe_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wallet_id', models.UUIDField(default=uuid.uuid4, help_text='Unique wallet identifier', unique=True)),
                ('name', models.CharField(help_text='Human-readable wallet name (auto-generated or user-set)', max_length=100)),
                ('address', models.CharField(help_text='Wallet address (0x...)', max_length=42)),
                ('wallet_type', models.CharField(choices=[('METAMASK', 'MetaMask'), ('WALLET_CONNECT', 'WalletConnect'), ('COINBASE_WALLET', 'Coinbase Wallet'), ('RAINBOW', 'Rainbow'), ('TRUST_WALLET', 'Trust Wallet'), ('OTHER', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('CONNECTED', 'Connected'), ('DISCONNECTED', 'Disconnected'), ('LOCKED', 'Locked'), ('COMPROMISED', 'Compromised')], default='CONNECTED', max_length=15)),
                ('supported_chains', models.JSONField(default=list, help_text='List of supported chain IDs')),
                ('primary_chain_id', models.PositiveIntegerField(default=84532, help_text='Primary chain ID for this wallet')),
                ('is_trading_enabled', models.BooleanField(default=True, help_text='Whether this wallet can be used for trading')),
                ('daily_limit_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Daily spending limit in USD', max_digits=15, null=True)),
                ('per_transaction_limit_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Per-transaction limit in USD', max_digits=15, null=True)),
                ('requires_confirmation', models.BooleanField(default=True, help_text='Whether transactions require manual confirmation')),
                ('last_connected_at', models.DateTimeField(blank=True, help_text='Last time this wallet was connected', null=True)),
                ('connection_method', models.CharField(blank=True, help_text='Method used to connect (WalletConnect, injected, etc.)', max_length=50)),
                ('wallet_client_version', models.CharField(blank=True, help_text='Version of the wallet client', max_length=100)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional wallet configuration and preferences')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_connected_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance_id', models.UUIDField(default=uuid.uuid4, help_text='Unique balance record identifier', unique=True)),
                ('chain_id', models.PositiveIntegerField(help_text='Chain ID where the token exists')),
                ('token_address', models.CharField(help_text="Token contract address (0x... or 'ETH' for native)", max_length=42)),
                ('token_symbol', models.CharField(help_text='Token symbol (ETH, USDC, etc.)', max_length=20)),
                ('token_name', models.CharField(blank=True, help_text='Full token name', max_length=100)),
                ('token_decimals', models.PositiveIntegerField(default=18, help_text='Number of decimal places for the token')),
                ('balance_wei', models.CharField(help_text='Raw balance in smallest token unit (wei)', max_length=78)),
                ('balance_formatted', models.DecimalField(decimal_places=18, help_text='Human-readable balance with decimals', max_digits=36)),
                ('usd_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated USD value of the balance', max_digits=15, null=True)),
                ('last_updated', models.DateTimeField(help_text='When this balance was last fetched from blockchain')),
                ('is_stale', models.BooleanField(default=False, help_text='Whether this balance data is considered stale')),
                ('update_error', models.TextField(blank=True, help_text='Error message if balance update failed')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balances', to='wallet.wallet')),
            ],
            options={
                'ordering': ['-usd_value', 'token_symbol'],
            },
        ),
        migrations.CreateModel(
            name='WalletTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_id', models.UUIDField(default=uuid.uuid4, help_text='Unique transaction record identifier', unique=True)),
                ('chain_id', models.PositiveIntegerField(help_text='Chain ID where transaction occurred')),
                ('transaction_hash', models.CharField(help_text='Blockchain transaction hash (0x...)', max_length=66, unique=True)),
                ('transaction_type', models.CharField(choices=[('SWAP', 'Token Swap'), ('TRANSFER', 'Token Transfer'), ('APPROVAL', 'Token Approval'), ('WRAP', 'Wrap/Unwrap'), ('LIQUIDITY_ADD', 'Add Liquidity'), ('LIQUIDITY_REMOVE', 'Remove Liquidity'), ('OTHER', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=15)),
                ('gas_used', models.BigIntegerField(blank=True, help_text='Gas units used by the transaction', null=True)),
                ('gas_price_gwei', models.DecimalField(blank=True, decimal_places=9, help_text='Gas price in Gwei', max_digits=20, null=True)),
                ('transaction_fee_eth', models.DecimalField(blank=True, decimal_places=18, help_text='Total transaction fee in ETH', max_digits=20, null=True)),
                ('transaction_fee_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Total transaction fee in USD', max_digits=15, null=True)),
                ('block_number', models.BigIntegerField(blank=True, help_text='Block number where transaction was mined', null=True)),
                ('block_timestamp', models.DateTimeField(blank=True, help_text='Block timestamp', null=True)),
                ('transaction_data', models.JSONField(blank=True, default=dict, help_text='Additional transaction metadata (tokens involved, amounts, etc.)')),
                ('error_reason', models.TextField(blank=True, help_text='Error reason if transaction failed')),
                ('wallet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='wallet.wallet')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_id', models.UUIDField(default=uuid.uuid4, help_text='Unique activity identifier', unique=True)),
                ('activity_type', models.CharField(choices=[('CONNECTION', 'Wallet Connection'), ('DISCONNECTION', 'Wallet Disconnection'), ('SIWE_LOGIN', 'SIWE Authentication'), ('TRANSACTION', 'Transaction Initiated'), ('BALANCE_UPDATE', 'Balance Updated'), ('CONFIG_CHANGE', 'Configuration Changed'), ('SECURITY_EVENT', 'Security Event'), ('ERROR', 'Error Occurred')], max_length=15)),
                ('description', models.CharField(help_text='Brief description of the activity', max_length=500)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the activity source', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('session_id', models.CharField(blank=True, help_text='Session identifier', max_length=100)),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional activity data')),
                ('was_successful', models.BooleanField(default=True, help_text='Whether the activity was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if activity failed')),
                ('siwe_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='wallet.siwesession')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wallet_activities', to=settings.AUTH_USER_MODEL)),
                ('wallet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='wallet.wallet')),
                ('transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='wallet.wallettransaction')),
            ],
            options={
                'verbose_name_plural': 'Wallet Activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['session_id'], name='wallet_siwe_session_1b3331_idx'),
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['wallet_address', 'status'], name='wallet_siwe_wallet__f9d5df_idx'),
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['user', 'status'], name='wallet_siwe_user_id_19fb66_idx'),
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['django_session_key'], name='wallet_siwe_django__ecf0c6_idx'),
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['status', 'expiration_time'], name='wallet_siwe_status_befa98_idx'),
        ),
        migrations.AddIndex(
            model_name='siwesession',
            index=models.Index(fields=['created_at'], name='wallet_siwe_created_cf41ed_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['wallet_id'], name='wallet_wall_wallet__fcc2ac_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['user', 'status'], name='wallet_wall_user_id_c4ebd1_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['address'], name='wallet_wall_address_c7bf63_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['primary_chain_id', 'status'], name='wallet_wall_primary_ba521c_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['is_trading_enabled'], name='wallet_wall_is_trad_ba2d9b_idx'),
        ),
        migrations.AddIndex(
            model_name='wallet',
            index=models.Index(fields=['last_connected_at'], name='wallet_wall_last_co_8bd9e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wallet',
            unique_together={('user', 'address')},
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['balance_id'], name='wallet_wall_balance_cab006_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['wallet', 'chain_id'], name='wallet_wall_wallet__b5dfe6_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['token_address', 'chain_id'], name='wallet_wall_token_a_26813f_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['last_updated'], name='wallet_wall_last_up_5983e8_idx'),
        ),
        migrations.AddIndex(
            model_name='walletbalance',
            index=models.Index(fields=['is_stale'], name='wallet_wall_is_stal_67572d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='walletbalance',
            unique_together={('wallet', 'chain_id', 'token_address')},
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['transaction_id'], name='wallet_wall_transac_9554b0_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['wallet', 'status'], name='wallet_wall_wallet__235478_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['transaction_hash'], name='wallet_wall_transac_289e5a_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['chain_id', 'status'], name='wallet_wall_chain_i_3aea00_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['transaction_type'], name='wallet_wall_transac_2c0a43_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['created_at'], name='wallet_wall_created_929d33_idx'),
        ),
        migrations.AddIndex(
            model_name='wallettransaction',
            index=models.Index(fields=['block_timestamp'], name='wallet_wall_block_t_475841_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['activity_id'], name='wallet_wall_activit_ea3c21_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['wallet', 'activity_type'], name='wallet_wall_wallet__502287_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['user', 'created_at'], name='wallet_wall_user_id_4f9ff0_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['activity_type'], name='wallet_wall_activit_b20478_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['was_successful'], name='wallet_wall_was_suc_3667e8_idx'),
        ),
        migrations.AddIndex(
            model_name='walletactivity',
            index=models.Index(fields=['created_at'], name='wallet_wall_created_669505_idx'),
        ),
    ]
