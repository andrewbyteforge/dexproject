# Generated by Django - Clean migration to add missing fields
# File: dashboard/migrations/0003_add_missing_fields_clean.py

from django.db import migrations, models
import django.core.validators
from decimal import Decimal
from django.utils import timezone


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0002_alert_updated_at_systemstatus_updated_at_and_more'),
    ]

    operations = [
        # Add the missing fields to BotConfiguration
        migrations.AddField(
            model_name='botconfiguration',
            name='risk_tolerance_level',
            field=models.CharField(
                choices=[
                    ('VERY_LOW', 'Very Low'), 
                    ('LOW', 'Low'), 
                    ('MEDIUM', 'Medium'), 
                    ('HIGH', 'High'), 
                    ('VERY_HIGH', 'Very High')
                ],
                default='MEDIUM',
                help_text='Risk tolerance level for this configuration',
                max_length=15
            ),
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='execution_timeout_ms',
            field=models.PositiveIntegerField(
                default=5000,
                help_text='Maximum execution timeout in milliseconds',
                validators=[
                    django.core.validators.MinValueValidator(100), 
                    django.core.validators.MaxValueValidator(30000)
                ]
            ),
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='max_slippage_percent',
            field=models.DecimalField(
                decimal_places=2,
                default=Decimal('2.0'),
                help_text='Maximum acceptable slippage percentage',
                max_digits=5,
                validators=[
                    django.core.validators.MinValueValidator(Decimal('0.1')), 
                    django.core.validators.MaxValueValidator(Decimal('50.0'))
                ]
            ),
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='mev_protection_enabled',
            field=models.BooleanField(
                default=True,
                help_text='Whether MEV (Maximum Extractable Value) protection is enabled'
            ),
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='analysis_depth',
            field=models.CharField(
                choices=[
                    ('BASIC', 'Basic'), 
                    ('STANDARD', 'Standard'), 
                    ('COMPREHENSIVE', 'Comprehensive'), 
                    ('DEEP', 'Deep Analysis')
                ],
                default='STANDARD',
                help_text='Depth of analysis for smart lane trading',
                max_length=15
            ),
        ),
        
        # Update existing fields to support new trading modes
        migrations.AlterField(
            model_name='botconfiguration',
            name='trading_mode',
            field=models.CharField(
                choices=[
                    ('PAPER', 'Paper Trading'), 
                    ('LIVE', 'Live Trading'), 
                    ('SHADOW', 'Shadow Trading'), 
                    ('FAST_LANE', 'Fast Lane'), 
                    ('SMART_LANE', 'Smart Lane')
                ],
                default='PAPER',
                max_length=15
            ),
        ),
        migrations.AlterField(
            model_name='botconfiguration',
            name='status',
            field=models.CharField(
                choices=[
                    ('DRAFT', 'Draft'), 
                    ('ACTIVE', 'Active'), 
                    ('PAUSED', 'Paused'), 
                    ('ARCHIVED', 'Archived'), 
                    ('INACTIVE', 'Inactive')
                ],
                default='DRAFT',
                max_length=10
            ),
        ),
        
        # Make strategy and risk_profile optional to prevent FK constraints issues
        migrations.AlterField(
            model_name='botconfiguration',
            name='strategy',
            field=models.ForeignKey(
                blank=True,
                help_text='Trading strategy to use',
                null=True,
                on_delete=models.CASCADE,
                related_name='bot_configurations',
                to='trading.strategy'
            ),
        ),
        migrations.AlterField(
            model_name='botconfiguration',
            name='risk_profile',
            field=models.ForeignKey(
                blank=True,
                help_text='Risk profile to apply',
                null=True,
                on_delete=models.CASCADE,
                related_name='bot_configurations',
                to='risk.riskprofile'
            ),
        ),
        
        # Update TradingSession trading_mode field to match BotConfiguration
        migrations.AlterField(
            model_name='tradingsession',
            name='trading_mode',
            field=models.CharField(
                choices=[
                    ('PAPER', 'Paper Trading'), 
                    ('LIVE', 'Live Trading'), 
                    ('SHADOW', 'Shadow Trading'), 
                    ('FAST_LANE', 'Fast Lane'), 
                    ('SMART_LANE', 'Smart Lane')
                ],
                max_length=15
            ),
        ),
        
        # Add timestamp fields that were missing from TimestampMixin
        migrations.AddField(
            model_name='tokenblacklistentry',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='tokenblacklistentry',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='tokenwhitelistentry',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='tokenwhitelistentry',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='tradingsession',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='tradingsession',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='alert',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='systemstatus',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        
        # Only add indexes if they don't exist (to avoid conflicts)
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS dashboard_b_risk_tolerance_idx ON dashboard_botconfiguration (risk_tolerance_level);",
            reverse_sql="DROP INDEX IF EXISTS dashboard_b_risk_tolerance_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS dashboard_b_mev_protection_idx ON dashboard_botconfiguration (mev_protection_enabled);",
            reverse_sql="DROP INDEX IF EXISTS dashboard_b_mev_protection_idx;"
        ),
        
        # Fix the enabled_chains and enabled_dexes fields to make them optional
        migrations.AlterField(
            model_name='botconfiguration',
            name='enabled_chains',
            field=models.ManyToManyField(
                blank=True,
                help_text='Enabled blockchain networks',
                related_name='bot_configurations',
                to='trading.chain'
            ),
        ),
        migrations.AlterField(
            model_name='botconfiguration',
            name='enabled_dexes',
            field=models.ManyToManyField(
                blank=True,
                help_text='Enabled decentralized exchanges',
                related_name='bot_configurations',
                to='trading.dex'
            ),
        ),
    ]