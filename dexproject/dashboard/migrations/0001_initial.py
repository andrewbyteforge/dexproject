# Generated by Django 5.2.6 on 2025-09-11 11:26

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('risk', '0001_initial'),
        ('trading', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BotConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_id', models.UUIDField(default=uuid.uuid4, help_text='Unique configuration identifier', unique=True)),
                ('name', models.CharField(help_text='Configuration name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Configuration description')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('ARCHIVED', 'Archived')], default='DRAFT', max_length=10)),
                ('trading_mode', models.CharField(choices=[('PAPER', 'Paper Trading'), ('LIVE', 'Live Trading'), ('SHADOW', 'Shadow Trading')], default='PAPER', max_length=10)),
                ('max_position_size_usd', models.DecimalField(decimal_places=2, default=Decimal('1000.0'), help_text='Maximum position size in USD', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('10.0'))])),
                ('daily_loss_limit_usd', models.DecimalField(decimal_places=2, default=Decimal('100.0'), help_text='Daily loss limit in USD', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('1.0'))])),
                ('total_bankroll_usd', models.DecimalField(decimal_places=2, default=Decimal('10000.0'), help_text='Total available bankroll in USD', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('100.0'))])),
                ('auto_execution_enabled', models.BooleanField(default=False, help_text='Whether to auto-execute trades without confirmation')),
                ('max_concurrent_positions', models.PositiveIntegerField(default=5, help_text='Maximum number of concurrent positions', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('require_manual_approval', models.BooleanField(default=True, help_text='Whether trades require manual approval')),
                ('notifications', models.JSONField(blank=True, default=dict, help_text='Notification preferences for this configuration')),
                ('advanced_config', models.JSONField(blank=True, default=dict, help_text='Advanced configuration parameters')),
                ('version', models.PositiveIntegerField(default=1, help_text='Configuration version number')),
                ('is_default', models.BooleanField(default=False, help_text="Whether this is the user's default configuration")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Last time this configuration was used', null=True)),
                ('enabled_chains', models.ManyToManyField(help_text='Enabled blockchain networks', related_name='bot_configurations', to='trading.chain')),
                ('enabled_dexes', models.ManyToManyField(help_text='Enabled decentralized exchanges', related_name='bot_configurations', to='trading.dex')),
                ('risk_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_configurations', to='risk.riskprofile')),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_configurations', to='trading.strategy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_configurations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_used_at', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_id', models.UUIDField(default=uuid.uuid4, help_text='Unique status record identifier', unique=True)),
                ('trading_engine_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('risk_engine_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('wallet_service_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('api_service_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('ethereum_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('base_status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('DEGRADED', 'Degraded Performance'), ('PARTIAL_OUTAGE', 'Partial Outage'), ('MAJOR_OUTAGE', 'Major Outage'), ('MAINTENANCE', 'Under Maintenance')], default='OPERATIONAL', max_length=15)),
                ('avg_response_time_ms', models.FloatField(blank=True, help_text='Average API response time in milliseconds', null=True)),
                ('error_rate_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Error rate percentage', max_digits=5, null=True)),
                ('uptime_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Uptime percentage', max_digits=5, null=True)),
                ('active_sessions', models.PositiveIntegerField(default=0, help_text='Number of active trading sessions')),
                ('active_users', models.PositiveIntegerField(default=0, help_text='Number of active users')),
                ('cpu_usage_percent', models.DecimalField(blank=True, decimal_places=2, help_text='CPU usage percentage', max_digits=5, null=True)),
                ('memory_usage_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Memory usage percentage', max_digits=5, null=True)),
                ('metrics', models.JSONField(blank=True, default=dict, help_text='Additional system metrics')),
                ('status_message', models.TextField(blank=True, help_text='Current status message')),
                ('incident_id', models.CharField(blank=True, help_text="Incident ID if there's an ongoing issue", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
                'indexes': [models.Index(fields=['status_id'], name='dashboard_s_status__229e80_idx'), models.Index(fields=['created_at'], name='dashboard_s_created_b18acb_idx'), models.Index(fields=['trading_engine_status'], name='dashboard_s_trading_e46419_idx'), models.Index(fields=['active_sessions'], name='dashboard_s_active__876c9a_idx')],
            },
        ),
        migrations.CreateModel(
            name='TokenBlacklistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('HONEYPOT', 'Honeypot Token'), ('HIGH_RISK', 'High Risk'), ('SCAM', 'Known Scam'), ('REGULATORY', 'Regulatory Concerns'), ('TECHNICAL', 'Technical Issues'), ('USER_CHOICE', 'User Choice'), ('COMPLIANCE', 'Compliance Requirement')], max_length=15)),
                ('description', models.TextField(help_text='Detailed reason for blacklisting')),
                ('is_permanent', models.BooleanField(default=True, help_text='Whether this blacklist entry is permanent')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this blacklist entry expires (if not permanent)', null=True)),
                ('evidence_urls', models.JSONField(blank=True, default=list, help_text='URLs to evidence supporting the blacklist')),
                ('risk_score', models.DecimalField(blank=True, decimal_places=2, help_text='Risk score that led to blacklisting (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='Last review date', null=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blacklist_additions', to=settings.AUTH_USER_MODEL)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklist_entries', to='dashboard.botconfiguration')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blacklist_reviews', to=settings.AUTH_USER_MODEL)),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklist_entries', to='trading.token')),
            ],
            options={
                'ordering': ['-added_at'],
            },
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='token_blacklist',
            field=models.ManyToManyField(blank=True, help_text='Blacklisted tokens', related_name='blacklisted_in_configs', through='dashboard.TokenBlacklistEntry', to='trading.token'),
        ),
        migrations.CreateModel(
            name='TokenWhitelistEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_position_size_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Override max position size for this token', max_digits=15, null=True)),
                ('max_slippage_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Override max slippage for this token', max_digits=5, null=True)),
                ('reason', models.CharField(blank=True, help_text='Reason for whitelisting this token', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this token')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='whitelist_additions', to=settings.AUTH_USER_MODEL)),
                ('config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whitelist_entries', to='dashboard.botconfiguration')),
                ('token', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whitelist_entries', to='trading.token')),
            ],
            options={
                'ordering': ['token__symbol'],
            },
        ),
        migrations.AddField(
            model_name='botconfiguration',
            name='token_whitelist',
            field=models.ManyToManyField(blank=True, help_text='Whitelisted tokens', related_name='whitelisted_in_configs', through='dashboard.TokenWhitelistEntry', to='trading.token'),
        ),
        migrations.CreateModel(
            name='TradingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, help_text='Unique session identifier', unique=True)),
                ('name', models.CharField(help_text='Session name or description', max_length=200)),
                ('config_snapshot', models.JSONField(help_text='Snapshot of bot configuration at session start')),
                ('status', models.CharField(choices=[('STARTING', 'Starting'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('STOPPING', 'Stopping'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('EMERGENCY_STOP', 'Emergency Stop')], default='STARTING', max_length=15)),
                ('trading_mode', models.CharField(choices=[('PAPER', 'Paper Trading'), ('LIVE', 'Live Trading'), ('SHADOW', 'Shadow Trading')], max_length=10)),
                ('total_opportunities', models.PositiveIntegerField(default=0, help_text='Total opportunities evaluated')),
                ('trades_executed', models.PositiveIntegerField(default=0, help_text='Number of trades executed')),
                ('successful_trades', models.PositiveIntegerField(default=0, help_text='Number of successful trades')),
                ('failed_trades', models.PositiveIntegerField(default=0, help_text='Number of failed trades')),
                ('starting_balance_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Starting balance in USD', max_digits=20)),
                ('current_balance_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Current balance in USD', max_digits=20)),
                ('realized_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Realized PnL in USD', max_digits=20)),
                ('unrealized_pnl_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Unrealized PnL in USD', max_digits=20)),
                ('total_fees_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Total fees paid in USD', max_digits=15)),
                ('max_drawdown_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Maximum drawdown in USD', max_digits=15)),
                ('max_drawdown_percent', models.DecimalField(decimal_places=4, default=Decimal('0'), help_text='Maximum drawdown percentage', max_digits=8)),
                ('daily_loss_usd', models.DecimalField(decimal_places=8, default=Decimal('0'), help_text='Daily loss amount in USD', max_digits=15)),
                ('average_execution_time_ms', models.FloatField(blank=True, help_text='Average trade execution time in milliseconds', null=True)),
                ('average_slippage_percent', models.DecimalField(blank=True, decimal_places=4, help_text='Average slippage percentage', max_digits=8, null=True)),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Number of errors encountered')),
                ('last_error', models.TextField(blank=True, help_text='Last error message')),
                ('daily_limit_hit', models.BooleanField(default=False, help_text='Whether daily loss limit was hit')),
                ('emergency_stop_triggered', models.BooleanField(default=False, help_text='Whether emergency stop was triggered')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('paused_at', models.DateTimeField(blank=True, help_text='When session was paused', null=True)),
                ('stopped_at', models.DateTimeField(blank=True, help_text='When session was stopped', null=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('bot_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trading_sessions', to='dashboard.botconfiguration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trading_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.UUIDField(default=uuid.uuid4, help_text='Unique alert identifier', unique=True)),
                ('alert_type', models.CharField(choices=[('TRADE_EXECUTED', 'Trade Executed'), ('POSITION_OPENED', 'Position Opened'), ('POSITION_CLOSED', 'Position Closed'), ('PROFIT_TARGET', 'Profit Target Hit'), ('STOP_LOSS', 'Stop Loss Hit'), ('RISK_WARNING', 'Risk Warning'), ('DAILY_LIMIT', 'Daily Limit Hit'), ('SYSTEM_ERROR', 'System Error'), ('EMERGENCY_STOP', 'Emergency Stop'), ('HIGH_VOLATILITY', 'High Volatility'), ('HONEYPOT_DETECTED', 'Honeypot Detected'), ('SYSTEM_STATUS', 'System Status')], max_length=20)),
                ('severity', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('UNREAD', 'Unread'), ('READ', 'Read'), ('DISMISSED', 'Dismissed'), ('ARCHIVED', 'Archived')], default='UNREAD', max_length=10)),
                ('title', models.CharField(help_text='Alert title', max_length=200)),
                ('message', models.TextField(help_text='Alert message content')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional alert data')),
                ('action_required', models.BooleanField(default=False, help_text='Whether this alert requires user action')),
                ('action_url', models.URLField(blank=True, help_text='URL for alert action')),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=100)),
                ('email_sent', models.BooleanField(default=False, help_text='Whether email notification was sent')),
                ('sms_sent', models.BooleanField(default=False, help_text='Whether SMS notification was sent')),
                ('push_sent', models.BooleanField(default=False, help_text='Whether push notification was sent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, help_text='When alert was read', null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, help_text='When alert was dismissed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When alert expires', null=True)),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', to='trading.position')),
                ('trade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', to='trading.trade')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
                ('trading_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alerts', to='dashboard.tradingsession')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_id', models.UUIDField(default=uuid.uuid4, help_text='Unique profile identifier', unique=True)),
                ('display_name', models.CharField(blank=True, help_text='Display name for the user', max_length=100)),
                ('avatar_url', models.URLField(blank=True, help_text="URL to user's avatar image")),
                ('timezone', models.CharField(default='UTC', help_text="User's timezone", max_length=50)),
                ('experience_level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced'), ('EXPERT', 'Expert')], default='BEGINNER', max_length=15)),
                ('risk_tolerance', models.CharField(choices=[('VERY_LOW', 'Very Low'), ('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('VERY_HIGH', 'Very High')], default='MEDIUM', max_length=10)),
                ('years_trading', models.PositiveIntegerField(blank=True, help_text='Years of trading experience', null=True)),
                ('email_notifications', models.BooleanField(default=True, help_text='Whether to send email notifications')),
                ('sms_notifications', models.BooleanField(default=False, help_text='Whether to send SMS notifications')),
                ('desktop_notifications', models.BooleanField(default=True, help_text='Whether to show desktop notifications')),
                ('dashboard_theme', models.CharField(choices=[('LIGHT', 'Light'), ('DARK', 'Dark'), ('AUTO', 'Auto')], default='DARK', help_text='Dashboard color theme', max_length=20)),
                ('default_timeframe', models.CharField(choices=[('1H', '1 Hour'), ('4H', '4 Hours'), ('1D', '1 Day'), ('1W', '1 Week'), ('1M', '1 Month')], default='1D', help_text='Default timeframe for charts', max_length=10)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for SMS notifications', max_length=20)),
                ('telegram_username', models.CharField(blank=True, help_text='Telegram username for notifications', max_length=50)),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether 2FA is enabled')),
                ('api_access_enabled', models.BooleanField(default=False, help_text='Whether API access is enabled')),
                ('onboarding_completed', models.BooleanField(default=False, help_text='Whether user has completed onboarding')),
                ('terms_accepted_at', models.DateTimeField(blank=True, help_text='When user accepted terms of service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_chains', models.ManyToManyField(blank=True, help_text="User's preferred blockchain networks", related_name='preferred_by_users', to='trading.chain')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='tokenblacklistentry',
            index=models.Index(fields=['config', 'reason'], name='dashboard_t_config__834286_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklistentry',
            index=models.Index(fields=['token'], name='dashboard_t_token_i_70066c_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklistentry',
            index=models.Index(fields=['is_permanent'], name='dashboard_t_is_perm_a40cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklistentry',
            index=models.Index(fields=['expires_at'], name='dashboard_t_expires_8bc886_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklistentry',
            index=models.Index(fields=['added_at'], name='dashboard_t_added_a_c10472_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tokenblacklistentry',
            unique_together={('config', 'token')},
        ),
        migrations.AlterUniqueTogether(
            name='tokenwhitelistentry',
            unique_together={('config', 'token')},
        ),
        migrations.AddIndex(
            model_name='botconfiguration',
            index=models.Index(fields=['config_id'], name='dashboard_b_config__11d3e9_idx'),
        ),
        migrations.AddIndex(
            model_name='botconfiguration',
            index=models.Index(fields=['user', 'status'], name='dashboard_b_user_id_8aded7_idx'),
        ),
        migrations.AddIndex(
            model_name='botconfiguration',
            index=models.Index(fields=['trading_mode'], name='dashboard_b_trading_d78e99_idx'),
        ),
        migrations.AddIndex(
            model_name='botconfiguration',
            index=models.Index(fields=['is_default'], name='dashboard_b_is_defa_e07b07_idx'),
        ),
        migrations.AddIndex(
            model_name='botconfiguration',
            index=models.Index(fields=['last_used_at'], name='dashboard_b_last_us_8bea47_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='botconfiguration',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['session_id'], name='dashboard_t_session_3c7140_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['user', 'status'], name='dashboard_t_user_id_2e3f4b_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['bot_config'], name='dashboard_t_bot_con_c19391_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['status'], name='dashboard_t_status_a21da9_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['trading_mode'], name='dashboard_t_trading_7cc578_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['started_at'], name='dashboard_t_started_42724e_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['daily_limit_hit'], name='dashboard_t_daily_l_eb7c98_idx'),
        ),
        migrations.AddIndex(
            model_name='tradingsession',
            index=models.Index(fields=['emergency_stop_triggered'], name='dashboard_t_emergen_052530_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['alert_id'], name='dashboard_a_alert_i_c1dd7c_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['user', 'status'], name='dashboard_a_user_id_c49e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['alert_type', 'severity'], name='dashboard_a_alert_t_a33178_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['status'], name='dashboard_a_status_fcc637_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['action_required'], name='dashboard_a_action__73cb18_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['created_at'], name='dashboard_a_created_fe9d01_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['expires_at'], name='dashboard_a_expires_9e10a3_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['profile_id'], name='dashboard_u_profile_15916a_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='dashboard_u_user_id_48b5f5_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['experience_level'], name='dashboard_u_experie_26f79e_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['risk_tolerance'], name='dashboard_u_risk_to_6c7a11_idx'),
        ),
    ]
